/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GameFuncCall_H
#define GameFuncCall_H

#include <thrift/TDispatchProcessor.h>
#include "GameCall_types.h"

namespace thrift { namespace GameCall {

class GameFuncCallIf {
 public:
  virtual ~GameFuncCallIf() {}
  virtual int32_t SetUID(const std::string& strUID, const std::string& strPWD) = 0;
  virtual bool IsValidServer() = 0;
  virtual void Test() = 0;
  virtual void Update() = 0;
  virtual void SetWorkPath(const std::string& strPath) = 0;
  virtual void GetPlayerPos(Pos& _return) = 0;
  virtual void Move(const int32_t x, const int32_t y) = 0;
  virtual void CastUntargetSkill(const int16_t x, const int16_t y, const int16_t skillNum, const int16_t castType) = 0;
  virtual void GetRoundList(std::vector<ObjInfo> & _return) = 0;
  virtual void GetRoundListTest(std::vector<ObjInfo> & _return) = 0;
  virtual void GetPlayerInfo(PlayerInfo& _return) = 0;
  virtual void StopMove() = 0;
  virtual void GetMapData(MapInfo& _return) = 0;
  virtual void ActiveTarget(const int32_t ObjPtr) = 0;
  virtual void GetWaypointInfo(std::vector<WaypointInfo> & _return) = 0;
  virtual void Transport(const int32_t MapID, const int32_t WaypointID, const int32_t DungeonModel) = 0;
  virtual void GetContainerItemList(std::vector<ItemInfo> & _return, const int32_t GetType) = 0;
  virtual void GetBagItemSpaceInfo(std::vector<ItemSpaceInfo> & _return) = 0;
  virtual void GetCurrentMapInfo(WaypointInfo& _return) = 0;
  virtual int32_t GetCurrentMapID() = 0;
  virtual void GetTrophyInfo(TrophyInfo& _return, const int32_t TrophyObjPtr) = 0;
  virtual int32_t SetLootTypeList(const std::vector<LootType> & LootList) = 0;
  virtual void GetTrophyList(std::vector<TrophyInfo> & _return, const std::vector<TrophyBaseInfo> & TrophyIDList) = 0;
  virtual int32_t ReadLoginState() = 0;
  virtual int32_t UseItem(const int32_t WinID, const int32_t ServiceID) = 0;
  virtual int32_t UseTransDoor() = 0;
  virtual int32_t ClickNPCMenu(const int32_t MenuID) = 0;
  virtual int32_t PutToSell(const int32_t Left, const int32_t Top, const int32_t ServiceID, const int32_t WinID) = 0;
  virtual int32_t ConfirmSell() = 0;
  virtual int32_t ReturnChoseRole() = 0;
  virtual int32_t Relive(const int32_t ReliveType) = 0;
  virtual int32_t GetNearbyWaypointID() = 0;
  virtual int32_t GetNearbySellNPCObjPtr(const int32_t NPCNum) = 0;
  virtual int32_t GetNearbyGoCityTransferDoorObjPtr() = 0;
  virtual int32_t GetNearbyGoBattleTransfetDoorObjPtr() = 0;
  virtual int32_t GetNearbyStorageObjPtr() = 0;
  virtual int32_t GetNearbyCrossObjPtr() = 0;
  virtual int32_t PickupItem(const int32_t BagObjPtr, const int32_t ItemServiceID) = 0;
  virtual int32_t DropdownItem(const int32_t StoragePageObjPtr, const int16_t Left, const int16_t Top) = 0;
  virtual int32_t ActiveStoragePageInfo(const int32_t PageNum) = 0;
  virtual int32_t GetStoragePagePtr(const int32_t ContainerNum) = 0;
};

class GameFuncCallIfFactory {
 public:
  typedef GameFuncCallIf Handler;

  virtual ~GameFuncCallIfFactory() {}

  virtual GameFuncCallIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GameFuncCallIf* /* handler */) = 0;
};

class GameFuncCallIfSingletonFactory : virtual public GameFuncCallIfFactory {
 public:
  GameFuncCallIfSingletonFactory(const boost::shared_ptr<GameFuncCallIf>& iface) : iface_(iface) {}
  virtual ~GameFuncCallIfSingletonFactory() {}

  virtual GameFuncCallIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GameFuncCallIf* /* handler */) {}

 protected:
  boost::shared_ptr<GameFuncCallIf> iface_;
};

class GameFuncCallNull : virtual public GameFuncCallIf {
 public:
  virtual ~GameFuncCallNull() {}
  int32_t SetUID(const std::string& /* strUID */, const std::string& /* strPWD */) {
    int32_t _return = 0;
    return _return;
  }
  bool IsValidServer() {
    bool _return = false;
    return _return;
  }
  void Test() {
    return;
  }
  void Update() {
    return;
  }
  void SetWorkPath(const std::string& /* strPath */) {
    return;
  }
  void GetPlayerPos(Pos& /* _return */) {
    return;
  }
  void Move(const int32_t /* x */, const int32_t /* y */) {
    return;
  }
  void CastUntargetSkill(const int16_t /* x */, const int16_t /* y */, const int16_t /* skillNum */, const int16_t /* castType */) {
    return;
  }
  void GetRoundList(std::vector<ObjInfo> & /* _return */) {
    return;
  }
  void GetRoundListTest(std::vector<ObjInfo> & /* _return */) {
    return;
  }
  void GetPlayerInfo(PlayerInfo& /* _return */) {
    return;
  }
  void StopMove() {
    return;
  }
  void GetMapData(MapInfo& /* _return */) {
    return;
  }
  void ActiveTarget(const int32_t /* ObjPtr */) {
    return;
  }
  void GetWaypointInfo(std::vector<WaypointInfo> & /* _return */) {
    return;
  }
  void Transport(const int32_t /* MapID */, const int32_t /* WaypointID */, const int32_t /* DungeonModel */) {
    return;
  }
  void GetContainerItemList(std::vector<ItemInfo> & /* _return */, const int32_t /* GetType */) {
    return;
  }
  void GetBagItemSpaceInfo(std::vector<ItemSpaceInfo> & /* _return */) {
    return;
  }
  void GetCurrentMapInfo(WaypointInfo& /* _return */) {
    return;
  }
  int32_t GetCurrentMapID() {
    int32_t _return = 0;
    return _return;
  }
  void GetTrophyInfo(TrophyInfo& /* _return */, const int32_t /* TrophyObjPtr */) {
    return;
  }
  int32_t SetLootTypeList(const std::vector<LootType> & /* LootList */) {
    int32_t _return = 0;
    return _return;
  }
  void GetTrophyList(std::vector<TrophyInfo> & /* _return */, const std::vector<TrophyBaseInfo> & /* TrophyIDList */) {
    return;
  }
  int32_t ReadLoginState() {
    int32_t _return = 0;
    return _return;
  }
  int32_t UseItem(const int32_t /* WinID */, const int32_t /* ServiceID */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t UseTransDoor() {
    int32_t _return = 0;
    return _return;
  }
  int32_t ClickNPCMenu(const int32_t /* MenuID */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t PutToSell(const int32_t /* Left */, const int32_t /* Top */, const int32_t /* ServiceID */, const int32_t /* WinID */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t ConfirmSell() {
    int32_t _return = 0;
    return _return;
  }
  int32_t ReturnChoseRole() {
    int32_t _return = 0;
    return _return;
  }
  int32_t Relive(const int32_t /* ReliveType */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetNearbyWaypointID() {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetNearbySellNPCObjPtr(const int32_t /* NPCNum */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetNearbyGoCityTransferDoorObjPtr() {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetNearbyGoBattleTransfetDoorObjPtr() {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetNearbyStorageObjPtr() {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetNearbyCrossObjPtr() {
    int32_t _return = 0;
    return _return;
  }
  int32_t PickupItem(const int32_t /* BagObjPtr */, const int32_t /* ItemServiceID */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t DropdownItem(const int32_t /* StoragePageObjPtr */, const int16_t /* Left */, const int16_t /* Top */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t ActiveStoragePageInfo(const int32_t /* PageNum */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetStoragePagePtr(const int32_t /* ContainerNum */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _GameFuncCall_SetUID_args__isset {
  _GameFuncCall_SetUID_args__isset() : strUID(false), strPWD(false) {}
  bool strUID;
  bool strPWD;
} _GameFuncCall_SetUID_args__isset;

class GameFuncCall_SetUID_args {
 public:

  GameFuncCall_SetUID_args() : strUID(), strPWD() {
  }

  virtual ~GameFuncCall_SetUID_args() throw() {}

  std::string strUID;
  std::string strPWD;

  _GameFuncCall_SetUID_args__isset __isset;

  void __set_strUID(const std::string& val) {
    strUID = val;
  }

  void __set_strPWD(const std::string& val) {
    strPWD = val;
  }

  bool operator == (const GameFuncCall_SetUID_args & rhs) const
  {
    if (!(strUID == rhs.strUID))
      return false;
    if (!(strPWD == rhs.strPWD))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_SetUID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_SetUID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_SetUID_pargs {
 public:


  virtual ~GameFuncCall_SetUID_pargs() throw() {}

  const std::string* strUID;
  const std::string* strPWD;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_SetUID_result__isset {
  _GameFuncCall_SetUID_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_SetUID_result__isset;

class GameFuncCall_SetUID_result {
 public:

  GameFuncCall_SetUID_result() : success(0) {
  }

  virtual ~GameFuncCall_SetUID_result() throw() {}

  int32_t success;

  _GameFuncCall_SetUID_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_SetUID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_SetUID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_SetUID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_SetUID_presult__isset {
  _GameFuncCall_SetUID_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_SetUID_presult__isset;

class GameFuncCall_SetUID_presult {
 public:


  virtual ~GameFuncCall_SetUID_presult() throw() {}

  int32_t* success;

  _GameFuncCall_SetUID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_IsValidServer_args {
 public:

  GameFuncCall_IsValidServer_args() {
  }

  virtual ~GameFuncCall_IsValidServer_args() throw() {}


  bool operator == (const GameFuncCall_IsValidServer_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_IsValidServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_IsValidServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_IsValidServer_pargs {
 public:


  virtual ~GameFuncCall_IsValidServer_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_IsValidServer_result__isset {
  _GameFuncCall_IsValidServer_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_IsValidServer_result__isset;

class GameFuncCall_IsValidServer_result {
 public:

  GameFuncCall_IsValidServer_result() : success(0) {
  }

  virtual ~GameFuncCall_IsValidServer_result() throw() {}

  bool success;

  _GameFuncCall_IsValidServer_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const GameFuncCall_IsValidServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_IsValidServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_IsValidServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_IsValidServer_presult__isset {
  _GameFuncCall_IsValidServer_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_IsValidServer_presult__isset;

class GameFuncCall_IsValidServer_presult {
 public:


  virtual ~GameFuncCall_IsValidServer_presult() throw() {}

  bool* success;

  _GameFuncCall_IsValidServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_Test_args {
 public:

  GameFuncCall_Test_args() {
  }

  virtual ~GameFuncCall_Test_args() throw() {}


  bool operator == (const GameFuncCall_Test_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_Test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Test_pargs {
 public:


  virtual ~GameFuncCall_Test_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Test_result {
 public:

  GameFuncCall_Test_result() {
  }

  virtual ~GameFuncCall_Test_result() throw() {}


  bool operator == (const GameFuncCall_Test_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_Test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Test_presult {
 public:


  virtual ~GameFuncCall_Test_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_Update_args {
 public:

  GameFuncCall_Update_args() {
  }

  virtual ~GameFuncCall_Update_args() throw() {}


  bool operator == (const GameFuncCall_Update_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_Update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Update_pargs {
 public:


  virtual ~GameFuncCall_Update_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Update_result {
 public:

  GameFuncCall_Update_result() {
  }

  virtual ~GameFuncCall_Update_result() throw() {}


  bool operator == (const GameFuncCall_Update_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_Update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Update_presult {
 public:


  virtual ~GameFuncCall_Update_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_SetWorkPath_args__isset {
  _GameFuncCall_SetWorkPath_args__isset() : strPath(false) {}
  bool strPath;
} _GameFuncCall_SetWorkPath_args__isset;

class GameFuncCall_SetWorkPath_args {
 public:

  GameFuncCall_SetWorkPath_args() : strPath() {
  }

  virtual ~GameFuncCall_SetWorkPath_args() throw() {}

  std::string strPath;

  _GameFuncCall_SetWorkPath_args__isset __isset;

  void __set_strPath(const std::string& val) {
    strPath = val;
  }

  bool operator == (const GameFuncCall_SetWorkPath_args & rhs) const
  {
    if (!(strPath == rhs.strPath))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_SetWorkPath_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_SetWorkPath_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_SetWorkPath_pargs {
 public:


  virtual ~GameFuncCall_SetWorkPath_pargs() throw() {}

  const std::string* strPath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_SetWorkPath_result {
 public:

  GameFuncCall_SetWorkPath_result() {
  }

  virtual ~GameFuncCall_SetWorkPath_result() throw() {}


  bool operator == (const GameFuncCall_SetWorkPath_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_SetWorkPath_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_SetWorkPath_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_SetWorkPath_presult {
 public:


  virtual ~GameFuncCall_SetWorkPath_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetPlayerPos_args {
 public:

  GameFuncCall_GetPlayerPos_args() {
  }

  virtual ~GameFuncCall_GetPlayerPos_args() throw() {}


  bool operator == (const GameFuncCall_GetPlayerPos_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetPlayerPos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetPlayerPos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetPlayerPos_pargs {
 public:


  virtual ~GameFuncCall_GetPlayerPos_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetPlayerPos_result__isset {
  _GameFuncCall_GetPlayerPos_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetPlayerPos_result__isset;

class GameFuncCall_GetPlayerPos_result {
 public:

  GameFuncCall_GetPlayerPos_result() {
  }

  virtual ~GameFuncCall_GetPlayerPos_result() throw() {}

  Pos success;

  _GameFuncCall_GetPlayerPos_result__isset __isset;

  void __set_success(const Pos& val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetPlayerPos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetPlayerPos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetPlayerPos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetPlayerPos_presult__isset {
  _GameFuncCall_GetPlayerPos_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetPlayerPos_presult__isset;

class GameFuncCall_GetPlayerPos_presult {
 public:


  virtual ~GameFuncCall_GetPlayerPos_presult() throw() {}

  Pos* success;

  _GameFuncCall_GetPlayerPos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_Move_args__isset {
  _GameFuncCall_Move_args__isset() : x(false), y(false) {}
  bool x;
  bool y;
} _GameFuncCall_Move_args__isset;

class GameFuncCall_Move_args {
 public:

  GameFuncCall_Move_args() : x(0), y(0) {
  }

  virtual ~GameFuncCall_Move_args() throw() {}

  int32_t x;
  int32_t y;

  _GameFuncCall_Move_args__isset __isset;

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  bool operator == (const GameFuncCall_Move_args & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_Move_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Move_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Move_pargs {
 public:


  virtual ~GameFuncCall_Move_pargs() throw() {}

  const int32_t* x;
  const int32_t* y;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Move_result {
 public:

  GameFuncCall_Move_result() {
  }

  virtual ~GameFuncCall_Move_result() throw() {}


  bool operator == (const GameFuncCall_Move_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_Move_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Move_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Move_presult {
 public:


  virtual ~GameFuncCall_Move_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_CastUntargetSkill_args__isset {
  _GameFuncCall_CastUntargetSkill_args__isset() : x(false), y(false), skillNum(false), castType(false) {}
  bool x;
  bool y;
  bool skillNum;
  bool castType;
} _GameFuncCall_CastUntargetSkill_args__isset;

class GameFuncCall_CastUntargetSkill_args {
 public:

  GameFuncCall_CastUntargetSkill_args() : x(0), y(0), skillNum(0), castType(0) {
  }

  virtual ~GameFuncCall_CastUntargetSkill_args() throw() {}

  int16_t x;
  int16_t y;
  int16_t skillNum;
  int16_t castType;

  _GameFuncCall_CastUntargetSkill_args__isset __isset;

  void __set_x(const int16_t val) {
    x = val;
  }

  void __set_y(const int16_t val) {
    y = val;
  }

  void __set_skillNum(const int16_t val) {
    skillNum = val;
  }

  void __set_castType(const int16_t val) {
    castType = val;
  }

  bool operator == (const GameFuncCall_CastUntargetSkill_args & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(skillNum == rhs.skillNum))
      return false;
    if (!(castType == rhs.castType))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_CastUntargetSkill_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_CastUntargetSkill_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_CastUntargetSkill_pargs {
 public:


  virtual ~GameFuncCall_CastUntargetSkill_pargs() throw() {}

  const int16_t* x;
  const int16_t* y;
  const int16_t* skillNum;
  const int16_t* castType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_CastUntargetSkill_result {
 public:

  GameFuncCall_CastUntargetSkill_result() {
  }

  virtual ~GameFuncCall_CastUntargetSkill_result() throw() {}


  bool operator == (const GameFuncCall_CastUntargetSkill_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_CastUntargetSkill_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_CastUntargetSkill_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_CastUntargetSkill_presult {
 public:


  virtual ~GameFuncCall_CastUntargetSkill_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetRoundList_args {
 public:

  GameFuncCall_GetRoundList_args() {
  }

  virtual ~GameFuncCall_GetRoundList_args() throw() {}


  bool operator == (const GameFuncCall_GetRoundList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetRoundList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetRoundList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetRoundList_pargs {
 public:


  virtual ~GameFuncCall_GetRoundList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetRoundList_result__isset {
  _GameFuncCall_GetRoundList_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetRoundList_result__isset;

class GameFuncCall_GetRoundList_result {
 public:

  GameFuncCall_GetRoundList_result() {
  }

  virtual ~GameFuncCall_GetRoundList_result() throw() {}

  std::vector<ObjInfo>  success;

  _GameFuncCall_GetRoundList_result__isset __isset;

  void __set_success(const std::vector<ObjInfo> & val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetRoundList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetRoundList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetRoundList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetRoundList_presult__isset {
  _GameFuncCall_GetRoundList_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetRoundList_presult__isset;

class GameFuncCall_GetRoundList_presult {
 public:


  virtual ~GameFuncCall_GetRoundList_presult() throw() {}

  std::vector<ObjInfo> * success;

  _GameFuncCall_GetRoundList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetRoundListTest_args {
 public:

  GameFuncCall_GetRoundListTest_args() {
  }

  virtual ~GameFuncCall_GetRoundListTest_args() throw() {}


  bool operator == (const GameFuncCall_GetRoundListTest_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetRoundListTest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetRoundListTest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetRoundListTest_pargs {
 public:


  virtual ~GameFuncCall_GetRoundListTest_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetRoundListTest_result__isset {
  _GameFuncCall_GetRoundListTest_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetRoundListTest_result__isset;

class GameFuncCall_GetRoundListTest_result {
 public:

  GameFuncCall_GetRoundListTest_result() {
  }

  virtual ~GameFuncCall_GetRoundListTest_result() throw() {}

  std::vector<ObjInfo>  success;

  _GameFuncCall_GetRoundListTest_result__isset __isset;

  void __set_success(const std::vector<ObjInfo> & val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetRoundListTest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetRoundListTest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetRoundListTest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetRoundListTest_presult__isset {
  _GameFuncCall_GetRoundListTest_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetRoundListTest_presult__isset;

class GameFuncCall_GetRoundListTest_presult {
 public:


  virtual ~GameFuncCall_GetRoundListTest_presult() throw() {}

  std::vector<ObjInfo> * success;

  _GameFuncCall_GetRoundListTest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetPlayerInfo_args {
 public:

  GameFuncCall_GetPlayerInfo_args() {
  }

  virtual ~GameFuncCall_GetPlayerInfo_args() throw() {}


  bool operator == (const GameFuncCall_GetPlayerInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetPlayerInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetPlayerInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetPlayerInfo_pargs {
 public:


  virtual ~GameFuncCall_GetPlayerInfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetPlayerInfo_result__isset {
  _GameFuncCall_GetPlayerInfo_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetPlayerInfo_result__isset;

class GameFuncCall_GetPlayerInfo_result {
 public:

  GameFuncCall_GetPlayerInfo_result() {
  }

  virtual ~GameFuncCall_GetPlayerInfo_result() throw() {}

  PlayerInfo success;

  _GameFuncCall_GetPlayerInfo_result__isset __isset;

  void __set_success(const PlayerInfo& val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetPlayerInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetPlayerInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetPlayerInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetPlayerInfo_presult__isset {
  _GameFuncCall_GetPlayerInfo_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetPlayerInfo_presult__isset;

class GameFuncCall_GetPlayerInfo_presult {
 public:


  virtual ~GameFuncCall_GetPlayerInfo_presult() throw() {}

  PlayerInfo* success;

  _GameFuncCall_GetPlayerInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_StopMove_args {
 public:

  GameFuncCall_StopMove_args() {
  }

  virtual ~GameFuncCall_StopMove_args() throw() {}


  bool operator == (const GameFuncCall_StopMove_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_StopMove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_StopMove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_StopMove_pargs {
 public:


  virtual ~GameFuncCall_StopMove_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_StopMove_result {
 public:

  GameFuncCall_StopMove_result() {
  }

  virtual ~GameFuncCall_StopMove_result() throw() {}


  bool operator == (const GameFuncCall_StopMove_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_StopMove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_StopMove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_StopMove_presult {
 public:


  virtual ~GameFuncCall_StopMove_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetMapData_args {
 public:

  GameFuncCall_GetMapData_args() {
  }

  virtual ~GameFuncCall_GetMapData_args() throw() {}


  bool operator == (const GameFuncCall_GetMapData_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetMapData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetMapData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetMapData_pargs {
 public:


  virtual ~GameFuncCall_GetMapData_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetMapData_result__isset {
  _GameFuncCall_GetMapData_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetMapData_result__isset;

class GameFuncCall_GetMapData_result {
 public:

  GameFuncCall_GetMapData_result() {
  }

  virtual ~GameFuncCall_GetMapData_result() throw() {}

  MapInfo success;

  _GameFuncCall_GetMapData_result__isset __isset;

  void __set_success(const MapInfo& val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetMapData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetMapData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetMapData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetMapData_presult__isset {
  _GameFuncCall_GetMapData_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetMapData_presult__isset;

class GameFuncCall_GetMapData_presult {
 public:


  virtual ~GameFuncCall_GetMapData_presult() throw() {}

  MapInfo* success;

  _GameFuncCall_GetMapData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_ActiveTarget_args__isset {
  _GameFuncCall_ActiveTarget_args__isset() : ObjPtr(false) {}
  bool ObjPtr;
} _GameFuncCall_ActiveTarget_args__isset;

class GameFuncCall_ActiveTarget_args {
 public:

  GameFuncCall_ActiveTarget_args() : ObjPtr(0) {
  }

  virtual ~GameFuncCall_ActiveTarget_args() throw() {}

  int32_t ObjPtr;

  _GameFuncCall_ActiveTarget_args__isset __isset;

  void __set_ObjPtr(const int32_t val) {
    ObjPtr = val;
  }

  bool operator == (const GameFuncCall_ActiveTarget_args & rhs) const
  {
    if (!(ObjPtr == rhs.ObjPtr))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_ActiveTarget_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ActiveTarget_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ActiveTarget_pargs {
 public:


  virtual ~GameFuncCall_ActiveTarget_pargs() throw() {}

  const int32_t* ObjPtr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ActiveTarget_result {
 public:

  GameFuncCall_ActiveTarget_result() {
  }

  virtual ~GameFuncCall_ActiveTarget_result() throw() {}


  bool operator == (const GameFuncCall_ActiveTarget_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_ActiveTarget_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ActiveTarget_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ActiveTarget_presult {
 public:


  virtual ~GameFuncCall_ActiveTarget_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetWaypointInfo_args {
 public:

  GameFuncCall_GetWaypointInfo_args() {
  }

  virtual ~GameFuncCall_GetWaypointInfo_args() throw() {}


  bool operator == (const GameFuncCall_GetWaypointInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetWaypointInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetWaypointInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetWaypointInfo_pargs {
 public:


  virtual ~GameFuncCall_GetWaypointInfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetWaypointInfo_result__isset {
  _GameFuncCall_GetWaypointInfo_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetWaypointInfo_result__isset;

class GameFuncCall_GetWaypointInfo_result {
 public:

  GameFuncCall_GetWaypointInfo_result() {
  }

  virtual ~GameFuncCall_GetWaypointInfo_result() throw() {}

  std::vector<WaypointInfo>  success;

  _GameFuncCall_GetWaypointInfo_result__isset __isset;

  void __set_success(const std::vector<WaypointInfo> & val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetWaypointInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetWaypointInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetWaypointInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetWaypointInfo_presult__isset {
  _GameFuncCall_GetWaypointInfo_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetWaypointInfo_presult__isset;

class GameFuncCall_GetWaypointInfo_presult {
 public:


  virtual ~GameFuncCall_GetWaypointInfo_presult() throw() {}

  std::vector<WaypointInfo> * success;

  _GameFuncCall_GetWaypointInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_Transport_args__isset {
  _GameFuncCall_Transport_args__isset() : MapID(false), WaypointID(false), DungeonModel(false) {}
  bool MapID;
  bool WaypointID;
  bool DungeonModel;
} _GameFuncCall_Transport_args__isset;

class GameFuncCall_Transport_args {
 public:

  GameFuncCall_Transport_args() : MapID(0), WaypointID(0), DungeonModel(0) {
  }

  virtual ~GameFuncCall_Transport_args() throw() {}

  int32_t MapID;
  int32_t WaypointID;
  int32_t DungeonModel;

  _GameFuncCall_Transport_args__isset __isset;

  void __set_MapID(const int32_t val) {
    MapID = val;
  }

  void __set_WaypointID(const int32_t val) {
    WaypointID = val;
  }

  void __set_DungeonModel(const int32_t val) {
    DungeonModel = val;
  }

  bool operator == (const GameFuncCall_Transport_args & rhs) const
  {
    if (!(MapID == rhs.MapID))
      return false;
    if (!(WaypointID == rhs.WaypointID))
      return false;
    if (!(DungeonModel == rhs.DungeonModel))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_Transport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Transport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Transport_pargs {
 public:


  virtual ~GameFuncCall_Transport_pargs() throw() {}

  const int32_t* MapID;
  const int32_t* WaypointID;
  const int32_t* DungeonModel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Transport_result {
 public:

  GameFuncCall_Transport_result() {
  }

  virtual ~GameFuncCall_Transport_result() throw() {}


  bool operator == (const GameFuncCall_Transport_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_Transport_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Transport_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Transport_presult {
 public:


  virtual ~GameFuncCall_Transport_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_GetContainerItemList_args__isset {
  _GameFuncCall_GetContainerItemList_args__isset() : GetType(false) {}
  bool GetType;
} _GameFuncCall_GetContainerItemList_args__isset;

class GameFuncCall_GetContainerItemList_args {
 public:

  GameFuncCall_GetContainerItemList_args() : GetType(0) {
  }

  virtual ~GameFuncCall_GetContainerItemList_args() throw() {}

  int32_t GetType;

  _GameFuncCall_GetContainerItemList_args__isset __isset;

  void __set_GetType(const int32_t val) {
    GetType = val;
  }

  bool operator == (const GameFuncCall_GetContainerItemList_args & rhs) const
  {
    if (!(GetType == rhs.GetType))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetContainerItemList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetContainerItemList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetContainerItemList_pargs {
 public:


  virtual ~GameFuncCall_GetContainerItemList_pargs() throw() {}

  const int32_t* GetType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetContainerItemList_result__isset {
  _GameFuncCall_GetContainerItemList_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetContainerItemList_result__isset;

class GameFuncCall_GetContainerItemList_result {
 public:

  GameFuncCall_GetContainerItemList_result() {
  }

  virtual ~GameFuncCall_GetContainerItemList_result() throw() {}

  std::vector<ItemInfo>  success;

  _GameFuncCall_GetContainerItemList_result__isset __isset;

  void __set_success(const std::vector<ItemInfo> & val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetContainerItemList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetContainerItemList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetContainerItemList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetContainerItemList_presult__isset {
  _GameFuncCall_GetContainerItemList_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetContainerItemList_presult__isset;

class GameFuncCall_GetContainerItemList_presult {
 public:


  virtual ~GameFuncCall_GetContainerItemList_presult() throw() {}

  std::vector<ItemInfo> * success;

  _GameFuncCall_GetContainerItemList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetBagItemSpaceInfo_args {
 public:

  GameFuncCall_GetBagItemSpaceInfo_args() {
  }

  virtual ~GameFuncCall_GetBagItemSpaceInfo_args() throw() {}


  bool operator == (const GameFuncCall_GetBagItemSpaceInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetBagItemSpaceInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetBagItemSpaceInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetBagItemSpaceInfo_pargs {
 public:


  virtual ~GameFuncCall_GetBagItemSpaceInfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetBagItemSpaceInfo_result__isset {
  _GameFuncCall_GetBagItemSpaceInfo_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetBagItemSpaceInfo_result__isset;

class GameFuncCall_GetBagItemSpaceInfo_result {
 public:

  GameFuncCall_GetBagItemSpaceInfo_result() {
  }

  virtual ~GameFuncCall_GetBagItemSpaceInfo_result() throw() {}

  std::vector<ItemSpaceInfo>  success;

  _GameFuncCall_GetBagItemSpaceInfo_result__isset __isset;

  void __set_success(const std::vector<ItemSpaceInfo> & val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetBagItemSpaceInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetBagItemSpaceInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetBagItemSpaceInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetBagItemSpaceInfo_presult__isset {
  _GameFuncCall_GetBagItemSpaceInfo_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetBagItemSpaceInfo_presult__isset;

class GameFuncCall_GetBagItemSpaceInfo_presult {
 public:


  virtual ~GameFuncCall_GetBagItemSpaceInfo_presult() throw() {}

  std::vector<ItemSpaceInfo> * success;

  _GameFuncCall_GetBagItemSpaceInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetCurrentMapInfo_args {
 public:

  GameFuncCall_GetCurrentMapInfo_args() {
  }

  virtual ~GameFuncCall_GetCurrentMapInfo_args() throw() {}


  bool operator == (const GameFuncCall_GetCurrentMapInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetCurrentMapInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetCurrentMapInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetCurrentMapInfo_pargs {
 public:


  virtual ~GameFuncCall_GetCurrentMapInfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetCurrentMapInfo_result__isset {
  _GameFuncCall_GetCurrentMapInfo_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetCurrentMapInfo_result__isset;

class GameFuncCall_GetCurrentMapInfo_result {
 public:

  GameFuncCall_GetCurrentMapInfo_result() {
  }

  virtual ~GameFuncCall_GetCurrentMapInfo_result() throw() {}

  WaypointInfo success;

  _GameFuncCall_GetCurrentMapInfo_result__isset __isset;

  void __set_success(const WaypointInfo& val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetCurrentMapInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetCurrentMapInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetCurrentMapInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetCurrentMapInfo_presult__isset {
  _GameFuncCall_GetCurrentMapInfo_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetCurrentMapInfo_presult__isset;

class GameFuncCall_GetCurrentMapInfo_presult {
 public:


  virtual ~GameFuncCall_GetCurrentMapInfo_presult() throw() {}

  WaypointInfo* success;

  _GameFuncCall_GetCurrentMapInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetCurrentMapID_args {
 public:

  GameFuncCall_GetCurrentMapID_args() {
  }

  virtual ~GameFuncCall_GetCurrentMapID_args() throw() {}


  bool operator == (const GameFuncCall_GetCurrentMapID_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetCurrentMapID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetCurrentMapID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetCurrentMapID_pargs {
 public:


  virtual ~GameFuncCall_GetCurrentMapID_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetCurrentMapID_result__isset {
  _GameFuncCall_GetCurrentMapID_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetCurrentMapID_result__isset;

class GameFuncCall_GetCurrentMapID_result {
 public:

  GameFuncCall_GetCurrentMapID_result() : success(0) {
  }

  virtual ~GameFuncCall_GetCurrentMapID_result() throw() {}

  int32_t success;

  _GameFuncCall_GetCurrentMapID_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetCurrentMapID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetCurrentMapID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetCurrentMapID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetCurrentMapID_presult__isset {
  _GameFuncCall_GetCurrentMapID_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetCurrentMapID_presult__isset;

class GameFuncCall_GetCurrentMapID_presult {
 public:


  virtual ~GameFuncCall_GetCurrentMapID_presult() throw() {}

  int32_t* success;

  _GameFuncCall_GetCurrentMapID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_GetTrophyInfo_args__isset {
  _GameFuncCall_GetTrophyInfo_args__isset() : TrophyObjPtr(false) {}
  bool TrophyObjPtr;
} _GameFuncCall_GetTrophyInfo_args__isset;

class GameFuncCall_GetTrophyInfo_args {
 public:

  GameFuncCall_GetTrophyInfo_args() : TrophyObjPtr(0) {
  }

  virtual ~GameFuncCall_GetTrophyInfo_args() throw() {}

  int32_t TrophyObjPtr;

  _GameFuncCall_GetTrophyInfo_args__isset __isset;

  void __set_TrophyObjPtr(const int32_t val) {
    TrophyObjPtr = val;
  }

  bool operator == (const GameFuncCall_GetTrophyInfo_args & rhs) const
  {
    if (!(TrophyObjPtr == rhs.TrophyObjPtr))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetTrophyInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetTrophyInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetTrophyInfo_pargs {
 public:


  virtual ~GameFuncCall_GetTrophyInfo_pargs() throw() {}

  const int32_t* TrophyObjPtr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetTrophyInfo_result__isset {
  _GameFuncCall_GetTrophyInfo_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetTrophyInfo_result__isset;

class GameFuncCall_GetTrophyInfo_result {
 public:

  GameFuncCall_GetTrophyInfo_result() {
  }

  virtual ~GameFuncCall_GetTrophyInfo_result() throw() {}

  TrophyInfo success;

  _GameFuncCall_GetTrophyInfo_result__isset __isset;

  void __set_success(const TrophyInfo& val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetTrophyInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetTrophyInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetTrophyInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetTrophyInfo_presult__isset {
  _GameFuncCall_GetTrophyInfo_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetTrophyInfo_presult__isset;

class GameFuncCall_GetTrophyInfo_presult {
 public:


  virtual ~GameFuncCall_GetTrophyInfo_presult() throw() {}

  TrophyInfo* success;

  _GameFuncCall_GetTrophyInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_SetLootTypeList_args__isset {
  _GameFuncCall_SetLootTypeList_args__isset() : LootList(false) {}
  bool LootList;
} _GameFuncCall_SetLootTypeList_args__isset;

class GameFuncCall_SetLootTypeList_args {
 public:

  GameFuncCall_SetLootTypeList_args() {
  }

  virtual ~GameFuncCall_SetLootTypeList_args() throw() {}

  std::vector<LootType>  LootList;

  _GameFuncCall_SetLootTypeList_args__isset __isset;

  void __set_LootList(const std::vector<LootType> & val) {
    LootList = val;
  }

  bool operator == (const GameFuncCall_SetLootTypeList_args & rhs) const
  {
    if (!(LootList == rhs.LootList))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_SetLootTypeList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_SetLootTypeList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_SetLootTypeList_pargs {
 public:


  virtual ~GameFuncCall_SetLootTypeList_pargs() throw() {}

  const std::vector<LootType> * LootList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_SetLootTypeList_result__isset {
  _GameFuncCall_SetLootTypeList_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_SetLootTypeList_result__isset;

class GameFuncCall_SetLootTypeList_result {
 public:

  GameFuncCall_SetLootTypeList_result() : success(0) {
  }

  virtual ~GameFuncCall_SetLootTypeList_result() throw() {}

  int32_t success;

  _GameFuncCall_SetLootTypeList_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_SetLootTypeList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_SetLootTypeList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_SetLootTypeList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_SetLootTypeList_presult__isset {
  _GameFuncCall_SetLootTypeList_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_SetLootTypeList_presult__isset;

class GameFuncCall_SetLootTypeList_presult {
 public:


  virtual ~GameFuncCall_SetLootTypeList_presult() throw() {}

  int32_t* success;

  _GameFuncCall_SetLootTypeList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_GetTrophyList_args__isset {
  _GameFuncCall_GetTrophyList_args__isset() : TrophyIDList(false) {}
  bool TrophyIDList;
} _GameFuncCall_GetTrophyList_args__isset;

class GameFuncCall_GetTrophyList_args {
 public:

  GameFuncCall_GetTrophyList_args() {
  }

  virtual ~GameFuncCall_GetTrophyList_args() throw() {}

  std::vector<TrophyBaseInfo>  TrophyIDList;

  _GameFuncCall_GetTrophyList_args__isset __isset;

  void __set_TrophyIDList(const std::vector<TrophyBaseInfo> & val) {
    TrophyIDList = val;
  }

  bool operator == (const GameFuncCall_GetTrophyList_args & rhs) const
  {
    if (!(TrophyIDList == rhs.TrophyIDList))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetTrophyList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetTrophyList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetTrophyList_pargs {
 public:


  virtual ~GameFuncCall_GetTrophyList_pargs() throw() {}

  const std::vector<TrophyBaseInfo> * TrophyIDList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetTrophyList_result__isset {
  _GameFuncCall_GetTrophyList_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetTrophyList_result__isset;

class GameFuncCall_GetTrophyList_result {
 public:

  GameFuncCall_GetTrophyList_result() {
  }

  virtual ~GameFuncCall_GetTrophyList_result() throw() {}

  std::vector<TrophyInfo>  success;

  _GameFuncCall_GetTrophyList_result__isset __isset;

  void __set_success(const std::vector<TrophyInfo> & val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetTrophyList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetTrophyList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetTrophyList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetTrophyList_presult__isset {
  _GameFuncCall_GetTrophyList_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetTrophyList_presult__isset;

class GameFuncCall_GetTrophyList_presult {
 public:


  virtual ~GameFuncCall_GetTrophyList_presult() throw() {}

  std::vector<TrophyInfo> * success;

  _GameFuncCall_GetTrophyList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_ReadLoginState_args {
 public:

  GameFuncCall_ReadLoginState_args() {
  }

  virtual ~GameFuncCall_ReadLoginState_args() throw() {}


  bool operator == (const GameFuncCall_ReadLoginState_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_ReadLoginState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ReadLoginState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ReadLoginState_pargs {
 public:


  virtual ~GameFuncCall_ReadLoginState_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ReadLoginState_result__isset {
  _GameFuncCall_ReadLoginState_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_ReadLoginState_result__isset;

class GameFuncCall_ReadLoginState_result {
 public:

  GameFuncCall_ReadLoginState_result() : success(0) {
  }

  virtual ~GameFuncCall_ReadLoginState_result() throw() {}

  int32_t success;

  _GameFuncCall_ReadLoginState_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_ReadLoginState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_ReadLoginState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ReadLoginState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ReadLoginState_presult__isset {
  _GameFuncCall_ReadLoginState_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_ReadLoginState_presult__isset;

class GameFuncCall_ReadLoginState_presult {
 public:


  virtual ~GameFuncCall_ReadLoginState_presult() throw() {}

  int32_t* success;

  _GameFuncCall_ReadLoginState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_UseItem_args__isset {
  _GameFuncCall_UseItem_args__isset() : WinID(false), ServiceID(false) {}
  bool WinID;
  bool ServiceID;
} _GameFuncCall_UseItem_args__isset;

class GameFuncCall_UseItem_args {
 public:

  GameFuncCall_UseItem_args() : WinID(0), ServiceID(0) {
  }

  virtual ~GameFuncCall_UseItem_args() throw() {}

  int32_t WinID;
  int32_t ServiceID;

  _GameFuncCall_UseItem_args__isset __isset;

  void __set_WinID(const int32_t val) {
    WinID = val;
  }

  void __set_ServiceID(const int32_t val) {
    ServiceID = val;
  }

  bool operator == (const GameFuncCall_UseItem_args & rhs) const
  {
    if (!(WinID == rhs.WinID))
      return false;
    if (!(ServiceID == rhs.ServiceID))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_UseItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_UseItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_UseItem_pargs {
 public:


  virtual ~GameFuncCall_UseItem_pargs() throw() {}

  const int32_t* WinID;
  const int32_t* ServiceID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_UseItem_result__isset {
  _GameFuncCall_UseItem_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_UseItem_result__isset;

class GameFuncCall_UseItem_result {
 public:

  GameFuncCall_UseItem_result() : success(0) {
  }

  virtual ~GameFuncCall_UseItem_result() throw() {}

  int32_t success;

  _GameFuncCall_UseItem_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_UseItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_UseItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_UseItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_UseItem_presult__isset {
  _GameFuncCall_UseItem_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_UseItem_presult__isset;

class GameFuncCall_UseItem_presult {
 public:


  virtual ~GameFuncCall_UseItem_presult() throw() {}

  int32_t* success;

  _GameFuncCall_UseItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_UseTransDoor_args {
 public:

  GameFuncCall_UseTransDoor_args() {
  }

  virtual ~GameFuncCall_UseTransDoor_args() throw() {}


  bool operator == (const GameFuncCall_UseTransDoor_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_UseTransDoor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_UseTransDoor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_UseTransDoor_pargs {
 public:


  virtual ~GameFuncCall_UseTransDoor_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_UseTransDoor_result__isset {
  _GameFuncCall_UseTransDoor_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_UseTransDoor_result__isset;

class GameFuncCall_UseTransDoor_result {
 public:

  GameFuncCall_UseTransDoor_result() : success(0) {
  }

  virtual ~GameFuncCall_UseTransDoor_result() throw() {}

  int32_t success;

  _GameFuncCall_UseTransDoor_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_UseTransDoor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_UseTransDoor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_UseTransDoor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_UseTransDoor_presult__isset {
  _GameFuncCall_UseTransDoor_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_UseTransDoor_presult__isset;

class GameFuncCall_UseTransDoor_presult {
 public:


  virtual ~GameFuncCall_UseTransDoor_presult() throw() {}

  int32_t* success;

  _GameFuncCall_UseTransDoor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_ClickNPCMenu_args__isset {
  _GameFuncCall_ClickNPCMenu_args__isset() : MenuID(false) {}
  bool MenuID;
} _GameFuncCall_ClickNPCMenu_args__isset;

class GameFuncCall_ClickNPCMenu_args {
 public:

  GameFuncCall_ClickNPCMenu_args() : MenuID(0) {
  }

  virtual ~GameFuncCall_ClickNPCMenu_args() throw() {}

  int32_t MenuID;

  _GameFuncCall_ClickNPCMenu_args__isset __isset;

  void __set_MenuID(const int32_t val) {
    MenuID = val;
  }

  bool operator == (const GameFuncCall_ClickNPCMenu_args & rhs) const
  {
    if (!(MenuID == rhs.MenuID))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_ClickNPCMenu_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ClickNPCMenu_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ClickNPCMenu_pargs {
 public:


  virtual ~GameFuncCall_ClickNPCMenu_pargs() throw() {}

  const int32_t* MenuID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ClickNPCMenu_result__isset {
  _GameFuncCall_ClickNPCMenu_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_ClickNPCMenu_result__isset;

class GameFuncCall_ClickNPCMenu_result {
 public:

  GameFuncCall_ClickNPCMenu_result() : success(0) {
  }

  virtual ~GameFuncCall_ClickNPCMenu_result() throw() {}

  int32_t success;

  _GameFuncCall_ClickNPCMenu_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_ClickNPCMenu_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_ClickNPCMenu_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ClickNPCMenu_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ClickNPCMenu_presult__isset {
  _GameFuncCall_ClickNPCMenu_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_ClickNPCMenu_presult__isset;

class GameFuncCall_ClickNPCMenu_presult {
 public:


  virtual ~GameFuncCall_ClickNPCMenu_presult() throw() {}

  int32_t* success;

  _GameFuncCall_ClickNPCMenu_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_PutToSell_args__isset {
  _GameFuncCall_PutToSell_args__isset() : Left(false), Top(false), ServiceID(false), WinID(false) {}
  bool Left;
  bool Top;
  bool ServiceID;
  bool WinID;
} _GameFuncCall_PutToSell_args__isset;

class GameFuncCall_PutToSell_args {
 public:

  GameFuncCall_PutToSell_args() : Left(0), Top(0), ServiceID(0), WinID(0) {
  }

  virtual ~GameFuncCall_PutToSell_args() throw() {}

  int32_t Left;
  int32_t Top;
  int32_t ServiceID;
  int32_t WinID;

  _GameFuncCall_PutToSell_args__isset __isset;

  void __set_Left(const int32_t val) {
    Left = val;
  }

  void __set_Top(const int32_t val) {
    Top = val;
  }

  void __set_ServiceID(const int32_t val) {
    ServiceID = val;
  }

  void __set_WinID(const int32_t val) {
    WinID = val;
  }

  bool operator == (const GameFuncCall_PutToSell_args & rhs) const
  {
    if (!(Left == rhs.Left))
      return false;
    if (!(Top == rhs.Top))
      return false;
    if (!(ServiceID == rhs.ServiceID))
      return false;
    if (!(WinID == rhs.WinID))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_PutToSell_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_PutToSell_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_PutToSell_pargs {
 public:


  virtual ~GameFuncCall_PutToSell_pargs() throw() {}

  const int32_t* Left;
  const int32_t* Top;
  const int32_t* ServiceID;
  const int32_t* WinID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_PutToSell_result__isset {
  _GameFuncCall_PutToSell_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_PutToSell_result__isset;

class GameFuncCall_PutToSell_result {
 public:

  GameFuncCall_PutToSell_result() : success(0) {
  }

  virtual ~GameFuncCall_PutToSell_result() throw() {}

  int32_t success;

  _GameFuncCall_PutToSell_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_PutToSell_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_PutToSell_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_PutToSell_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_PutToSell_presult__isset {
  _GameFuncCall_PutToSell_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_PutToSell_presult__isset;

class GameFuncCall_PutToSell_presult {
 public:


  virtual ~GameFuncCall_PutToSell_presult() throw() {}

  int32_t* success;

  _GameFuncCall_PutToSell_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_ConfirmSell_args {
 public:

  GameFuncCall_ConfirmSell_args() {
  }

  virtual ~GameFuncCall_ConfirmSell_args() throw() {}


  bool operator == (const GameFuncCall_ConfirmSell_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_ConfirmSell_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ConfirmSell_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ConfirmSell_pargs {
 public:


  virtual ~GameFuncCall_ConfirmSell_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ConfirmSell_result__isset {
  _GameFuncCall_ConfirmSell_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_ConfirmSell_result__isset;

class GameFuncCall_ConfirmSell_result {
 public:

  GameFuncCall_ConfirmSell_result() : success(0) {
  }

  virtual ~GameFuncCall_ConfirmSell_result() throw() {}

  int32_t success;

  _GameFuncCall_ConfirmSell_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_ConfirmSell_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_ConfirmSell_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ConfirmSell_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ConfirmSell_presult__isset {
  _GameFuncCall_ConfirmSell_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_ConfirmSell_presult__isset;

class GameFuncCall_ConfirmSell_presult {
 public:


  virtual ~GameFuncCall_ConfirmSell_presult() throw() {}

  int32_t* success;

  _GameFuncCall_ConfirmSell_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_ReturnChoseRole_args {
 public:

  GameFuncCall_ReturnChoseRole_args() {
  }

  virtual ~GameFuncCall_ReturnChoseRole_args() throw() {}


  bool operator == (const GameFuncCall_ReturnChoseRole_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_ReturnChoseRole_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ReturnChoseRole_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ReturnChoseRole_pargs {
 public:


  virtual ~GameFuncCall_ReturnChoseRole_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ReturnChoseRole_result__isset {
  _GameFuncCall_ReturnChoseRole_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_ReturnChoseRole_result__isset;

class GameFuncCall_ReturnChoseRole_result {
 public:

  GameFuncCall_ReturnChoseRole_result() : success(0) {
  }

  virtual ~GameFuncCall_ReturnChoseRole_result() throw() {}

  int32_t success;

  _GameFuncCall_ReturnChoseRole_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_ReturnChoseRole_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_ReturnChoseRole_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ReturnChoseRole_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ReturnChoseRole_presult__isset {
  _GameFuncCall_ReturnChoseRole_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_ReturnChoseRole_presult__isset;

class GameFuncCall_ReturnChoseRole_presult {
 public:


  virtual ~GameFuncCall_ReturnChoseRole_presult() throw() {}

  int32_t* success;

  _GameFuncCall_ReturnChoseRole_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_Relive_args__isset {
  _GameFuncCall_Relive_args__isset() : ReliveType(false) {}
  bool ReliveType;
} _GameFuncCall_Relive_args__isset;

class GameFuncCall_Relive_args {
 public:

  GameFuncCall_Relive_args() : ReliveType(0) {
  }

  virtual ~GameFuncCall_Relive_args() throw() {}

  int32_t ReliveType;

  _GameFuncCall_Relive_args__isset __isset;

  void __set_ReliveType(const int32_t val) {
    ReliveType = val;
  }

  bool operator == (const GameFuncCall_Relive_args & rhs) const
  {
    if (!(ReliveType == rhs.ReliveType))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_Relive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Relive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_Relive_pargs {
 public:


  virtual ~GameFuncCall_Relive_pargs() throw() {}

  const int32_t* ReliveType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_Relive_result__isset {
  _GameFuncCall_Relive_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_Relive_result__isset;

class GameFuncCall_Relive_result {
 public:

  GameFuncCall_Relive_result() : success(0) {
  }

  virtual ~GameFuncCall_Relive_result() throw() {}

  int32_t success;

  _GameFuncCall_Relive_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_Relive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_Relive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_Relive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_Relive_presult__isset {
  _GameFuncCall_Relive_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_Relive_presult__isset;

class GameFuncCall_Relive_presult {
 public:


  virtual ~GameFuncCall_Relive_presult() throw() {}

  int32_t* success;

  _GameFuncCall_Relive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetNearbyWaypointID_args {
 public:

  GameFuncCall_GetNearbyWaypointID_args() {
  }

  virtual ~GameFuncCall_GetNearbyWaypointID_args() throw() {}


  bool operator == (const GameFuncCall_GetNearbyWaypointID_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbyWaypointID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbyWaypointID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetNearbyWaypointID_pargs {
 public:


  virtual ~GameFuncCall_GetNearbyWaypointID_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbyWaypointID_result__isset {
  _GameFuncCall_GetNearbyWaypointID_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbyWaypointID_result__isset;

class GameFuncCall_GetNearbyWaypointID_result {
 public:

  GameFuncCall_GetNearbyWaypointID_result() : success(0) {
  }

  virtual ~GameFuncCall_GetNearbyWaypointID_result() throw() {}

  int32_t success;

  _GameFuncCall_GetNearbyWaypointID_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetNearbyWaypointID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbyWaypointID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbyWaypointID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbyWaypointID_presult__isset {
  _GameFuncCall_GetNearbyWaypointID_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbyWaypointID_presult__isset;

class GameFuncCall_GetNearbyWaypointID_presult {
 public:


  virtual ~GameFuncCall_GetNearbyWaypointID_presult() throw() {}

  int32_t* success;

  _GameFuncCall_GetNearbyWaypointID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_GetNearbySellNPCObjPtr_args__isset {
  _GameFuncCall_GetNearbySellNPCObjPtr_args__isset() : NPCNum(false) {}
  bool NPCNum;
} _GameFuncCall_GetNearbySellNPCObjPtr_args__isset;

class GameFuncCall_GetNearbySellNPCObjPtr_args {
 public:

  GameFuncCall_GetNearbySellNPCObjPtr_args() : NPCNum(0) {
  }

  virtual ~GameFuncCall_GetNearbySellNPCObjPtr_args() throw() {}

  int32_t NPCNum;

  _GameFuncCall_GetNearbySellNPCObjPtr_args__isset __isset;

  void __set_NPCNum(const int32_t val) {
    NPCNum = val;
  }

  bool operator == (const GameFuncCall_GetNearbySellNPCObjPtr_args & rhs) const
  {
    if (!(NPCNum == rhs.NPCNum))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbySellNPCObjPtr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbySellNPCObjPtr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetNearbySellNPCObjPtr_pargs {
 public:


  virtual ~GameFuncCall_GetNearbySellNPCObjPtr_pargs() throw() {}

  const int32_t* NPCNum;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbySellNPCObjPtr_result__isset {
  _GameFuncCall_GetNearbySellNPCObjPtr_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbySellNPCObjPtr_result__isset;

class GameFuncCall_GetNearbySellNPCObjPtr_result {
 public:

  GameFuncCall_GetNearbySellNPCObjPtr_result() : success(0) {
  }

  virtual ~GameFuncCall_GetNearbySellNPCObjPtr_result() throw() {}

  int32_t success;

  _GameFuncCall_GetNearbySellNPCObjPtr_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetNearbySellNPCObjPtr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbySellNPCObjPtr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbySellNPCObjPtr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbySellNPCObjPtr_presult__isset {
  _GameFuncCall_GetNearbySellNPCObjPtr_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbySellNPCObjPtr_presult__isset;

class GameFuncCall_GetNearbySellNPCObjPtr_presult {
 public:


  virtual ~GameFuncCall_GetNearbySellNPCObjPtr_presult() throw() {}

  int32_t* success;

  _GameFuncCall_GetNearbySellNPCObjPtr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_args {
 public:

  GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_args() {
  }

  virtual ~GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_args() throw() {}


  bool operator == (const GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_pargs {
 public:


  virtual ~GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_result__isset {
  _GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_result__isset;

class GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_result {
 public:

  GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_result() : success(0) {
  }

  virtual ~GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_result() throw() {}

  int32_t success;

  _GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_presult__isset {
  _GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_presult__isset;

class GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_presult {
 public:


  virtual ~GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_presult() throw() {}

  int32_t* success;

  _GameFuncCall_GetNearbyGoCityTransferDoorObjPtr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_args {
 public:

  GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_args() {
  }

  virtual ~GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_args() throw() {}


  bool operator == (const GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_pargs {
 public:


  virtual ~GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_result__isset {
  _GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_result__isset;

class GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_result {
 public:

  GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_result() : success(0) {
  }

  virtual ~GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_result() throw() {}

  int32_t success;

  _GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_presult__isset {
  _GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_presult__isset;

class GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_presult {
 public:


  virtual ~GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_presult() throw() {}

  int32_t* success;

  _GameFuncCall_GetNearbyGoBattleTransfetDoorObjPtr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetNearbyStorageObjPtr_args {
 public:

  GameFuncCall_GetNearbyStorageObjPtr_args() {
  }

  virtual ~GameFuncCall_GetNearbyStorageObjPtr_args() throw() {}


  bool operator == (const GameFuncCall_GetNearbyStorageObjPtr_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbyStorageObjPtr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbyStorageObjPtr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetNearbyStorageObjPtr_pargs {
 public:


  virtual ~GameFuncCall_GetNearbyStorageObjPtr_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbyStorageObjPtr_result__isset {
  _GameFuncCall_GetNearbyStorageObjPtr_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbyStorageObjPtr_result__isset;

class GameFuncCall_GetNearbyStorageObjPtr_result {
 public:

  GameFuncCall_GetNearbyStorageObjPtr_result() : success(0) {
  }

  virtual ~GameFuncCall_GetNearbyStorageObjPtr_result() throw() {}

  int32_t success;

  _GameFuncCall_GetNearbyStorageObjPtr_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetNearbyStorageObjPtr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbyStorageObjPtr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbyStorageObjPtr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbyStorageObjPtr_presult__isset {
  _GameFuncCall_GetNearbyStorageObjPtr_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbyStorageObjPtr_presult__isset;

class GameFuncCall_GetNearbyStorageObjPtr_presult {
 public:


  virtual ~GameFuncCall_GetNearbyStorageObjPtr_presult() throw() {}

  int32_t* success;

  _GameFuncCall_GetNearbyStorageObjPtr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameFuncCall_GetNearbyCrossObjPtr_args {
 public:

  GameFuncCall_GetNearbyCrossObjPtr_args() {
  }

  virtual ~GameFuncCall_GetNearbyCrossObjPtr_args() throw() {}


  bool operator == (const GameFuncCall_GetNearbyCrossObjPtr_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbyCrossObjPtr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbyCrossObjPtr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetNearbyCrossObjPtr_pargs {
 public:


  virtual ~GameFuncCall_GetNearbyCrossObjPtr_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbyCrossObjPtr_result__isset {
  _GameFuncCall_GetNearbyCrossObjPtr_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbyCrossObjPtr_result__isset;

class GameFuncCall_GetNearbyCrossObjPtr_result {
 public:

  GameFuncCall_GetNearbyCrossObjPtr_result() : success(0) {
  }

  virtual ~GameFuncCall_GetNearbyCrossObjPtr_result() throw() {}

  int32_t success;

  _GameFuncCall_GetNearbyCrossObjPtr_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetNearbyCrossObjPtr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetNearbyCrossObjPtr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetNearbyCrossObjPtr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetNearbyCrossObjPtr_presult__isset {
  _GameFuncCall_GetNearbyCrossObjPtr_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetNearbyCrossObjPtr_presult__isset;

class GameFuncCall_GetNearbyCrossObjPtr_presult {
 public:


  virtual ~GameFuncCall_GetNearbyCrossObjPtr_presult() throw() {}

  int32_t* success;

  _GameFuncCall_GetNearbyCrossObjPtr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_PickupItem_args__isset {
  _GameFuncCall_PickupItem_args__isset() : BagObjPtr(false), ItemServiceID(false) {}
  bool BagObjPtr;
  bool ItemServiceID;
} _GameFuncCall_PickupItem_args__isset;

class GameFuncCall_PickupItem_args {
 public:

  GameFuncCall_PickupItem_args() : BagObjPtr(0), ItemServiceID(0) {
  }

  virtual ~GameFuncCall_PickupItem_args() throw() {}

  int32_t BagObjPtr;
  int32_t ItemServiceID;

  _GameFuncCall_PickupItem_args__isset __isset;

  void __set_BagObjPtr(const int32_t val) {
    BagObjPtr = val;
  }

  void __set_ItemServiceID(const int32_t val) {
    ItemServiceID = val;
  }

  bool operator == (const GameFuncCall_PickupItem_args & rhs) const
  {
    if (!(BagObjPtr == rhs.BagObjPtr))
      return false;
    if (!(ItemServiceID == rhs.ItemServiceID))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_PickupItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_PickupItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_PickupItem_pargs {
 public:


  virtual ~GameFuncCall_PickupItem_pargs() throw() {}

  const int32_t* BagObjPtr;
  const int32_t* ItemServiceID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_PickupItem_result__isset {
  _GameFuncCall_PickupItem_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_PickupItem_result__isset;

class GameFuncCall_PickupItem_result {
 public:

  GameFuncCall_PickupItem_result() : success(0) {
  }

  virtual ~GameFuncCall_PickupItem_result() throw() {}

  int32_t success;

  _GameFuncCall_PickupItem_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_PickupItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_PickupItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_PickupItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_PickupItem_presult__isset {
  _GameFuncCall_PickupItem_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_PickupItem_presult__isset;

class GameFuncCall_PickupItem_presult {
 public:


  virtual ~GameFuncCall_PickupItem_presult() throw() {}

  int32_t* success;

  _GameFuncCall_PickupItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_DropdownItem_args__isset {
  _GameFuncCall_DropdownItem_args__isset() : StoragePageObjPtr(false), Left(false), Top(false) {}
  bool StoragePageObjPtr;
  bool Left;
  bool Top;
} _GameFuncCall_DropdownItem_args__isset;

class GameFuncCall_DropdownItem_args {
 public:

  GameFuncCall_DropdownItem_args() : StoragePageObjPtr(0), Left(0), Top(0) {
  }

  virtual ~GameFuncCall_DropdownItem_args() throw() {}

  int32_t StoragePageObjPtr;
  int16_t Left;
  int16_t Top;

  _GameFuncCall_DropdownItem_args__isset __isset;

  void __set_StoragePageObjPtr(const int32_t val) {
    StoragePageObjPtr = val;
  }

  void __set_Left(const int16_t val) {
    Left = val;
  }

  void __set_Top(const int16_t val) {
    Top = val;
  }

  bool operator == (const GameFuncCall_DropdownItem_args & rhs) const
  {
    if (!(StoragePageObjPtr == rhs.StoragePageObjPtr))
      return false;
    if (!(Left == rhs.Left))
      return false;
    if (!(Top == rhs.Top))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_DropdownItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_DropdownItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_DropdownItem_pargs {
 public:


  virtual ~GameFuncCall_DropdownItem_pargs() throw() {}

  const int32_t* StoragePageObjPtr;
  const int16_t* Left;
  const int16_t* Top;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_DropdownItem_result__isset {
  _GameFuncCall_DropdownItem_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_DropdownItem_result__isset;

class GameFuncCall_DropdownItem_result {
 public:

  GameFuncCall_DropdownItem_result() : success(0) {
  }

  virtual ~GameFuncCall_DropdownItem_result() throw() {}

  int32_t success;

  _GameFuncCall_DropdownItem_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_DropdownItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_DropdownItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_DropdownItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_DropdownItem_presult__isset {
  _GameFuncCall_DropdownItem_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_DropdownItem_presult__isset;

class GameFuncCall_DropdownItem_presult {
 public:


  virtual ~GameFuncCall_DropdownItem_presult() throw() {}

  int32_t* success;

  _GameFuncCall_DropdownItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_ActiveStoragePageInfo_args__isset {
  _GameFuncCall_ActiveStoragePageInfo_args__isset() : PageNum(false) {}
  bool PageNum;
} _GameFuncCall_ActiveStoragePageInfo_args__isset;

class GameFuncCall_ActiveStoragePageInfo_args {
 public:

  GameFuncCall_ActiveStoragePageInfo_args() : PageNum(0) {
  }

  virtual ~GameFuncCall_ActiveStoragePageInfo_args() throw() {}

  int32_t PageNum;

  _GameFuncCall_ActiveStoragePageInfo_args__isset __isset;

  void __set_PageNum(const int32_t val) {
    PageNum = val;
  }

  bool operator == (const GameFuncCall_ActiveStoragePageInfo_args & rhs) const
  {
    if (!(PageNum == rhs.PageNum))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_ActiveStoragePageInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ActiveStoragePageInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_ActiveStoragePageInfo_pargs {
 public:


  virtual ~GameFuncCall_ActiveStoragePageInfo_pargs() throw() {}

  const int32_t* PageNum;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ActiveStoragePageInfo_result__isset {
  _GameFuncCall_ActiveStoragePageInfo_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_ActiveStoragePageInfo_result__isset;

class GameFuncCall_ActiveStoragePageInfo_result {
 public:

  GameFuncCall_ActiveStoragePageInfo_result() : success(0) {
  }

  virtual ~GameFuncCall_ActiveStoragePageInfo_result() throw() {}

  int32_t success;

  _GameFuncCall_ActiveStoragePageInfo_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_ActiveStoragePageInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_ActiveStoragePageInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_ActiveStoragePageInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_ActiveStoragePageInfo_presult__isset {
  _GameFuncCall_ActiveStoragePageInfo_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_ActiveStoragePageInfo_presult__isset;

class GameFuncCall_ActiveStoragePageInfo_presult {
 public:


  virtual ~GameFuncCall_ActiveStoragePageInfo_presult() throw() {}

  int32_t* success;

  _GameFuncCall_ActiveStoragePageInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameFuncCall_GetStoragePagePtr_args__isset {
  _GameFuncCall_GetStoragePagePtr_args__isset() : ContainerNum(false) {}
  bool ContainerNum;
} _GameFuncCall_GetStoragePagePtr_args__isset;

class GameFuncCall_GetStoragePagePtr_args {
 public:

  GameFuncCall_GetStoragePagePtr_args() : ContainerNum(0) {
  }

  virtual ~GameFuncCall_GetStoragePagePtr_args() throw() {}

  int32_t ContainerNum;

  _GameFuncCall_GetStoragePagePtr_args__isset __isset;

  void __set_ContainerNum(const int32_t val) {
    ContainerNum = val;
  }

  bool operator == (const GameFuncCall_GetStoragePagePtr_args & rhs) const
  {
    if (!(ContainerNum == rhs.ContainerNum))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetStoragePagePtr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetStoragePagePtr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameFuncCall_GetStoragePagePtr_pargs {
 public:


  virtual ~GameFuncCall_GetStoragePagePtr_pargs() throw() {}

  const int32_t* ContainerNum;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetStoragePagePtr_result__isset {
  _GameFuncCall_GetStoragePagePtr_result__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetStoragePagePtr_result__isset;

class GameFuncCall_GetStoragePagePtr_result {
 public:

  GameFuncCall_GetStoragePagePtr_result() : success(0) {
  }

  virtual ~GameFuncCall_GetStoragePagePtr_result() throw() {}

  int32_t success;

  _GameFuncCall_GetStoragePagePtr_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const GameFuncCall_GetStoragePagePtr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameFuncCall_GetStoragePagePtr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameFuncCall_GetStoragePagePtr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameFuncCall_GetStoragePagePtr_presult__isset {
  _GameFuncCall_GetStoragePagePtr_presult__isset() : success(false) {}
  bool success;
} _GameFuncCall_GetStoragePagePtr_presult__isset;

class GameFuncCall_GetStoragePagePtr_presult {
 public:


  virtual ~GameFuncCall_GetStoragePagePtr_presult() throw() {}

  int32_t* success;

  _GameFuncCall_GetStoragePagePtr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GameFuncCallClient : virtual public GameFuncCallIf {
 public:
  GameFuncCallClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  GameFuncCallClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t SetUID(const std::string& strUID, const std::string& strPWD);
  void send_SetUID(const std::string& strUID, const std::string& strPWD);
  int32_t recv_SetUID();
  bool IsValidServer();
  void send_IsValidServer();
  bool recv_IsValidServer();
  void Test();
  void send_Test();
  void recv_Test();
  void Update();
  void send_Update();
  void recv_Update();
  void SetWorkPath(const std::string& strPath);
  void send_SetWorkPath(const std::string& strPath);
  void recv_SetWorkPath();
  void GetPlayerPos(Pos& _return);
  void send_GetPlayerPos();
  void recv_GetPlayerPos(Pos& _return);
  void Move(const int32_t x, const int32_t y);
  void send_Move(const int32_t x, const int32_t y);
  void recv_Move();
  void CastUntargetSkill(const int16_t x, const int16_t y, const int16_t skillNum, const int16_t castType);
  void send_CastUntargetSkill(const int16_t x, const int16_t y, const int16_t skillNum, const int16_t castType);
  void recv_CastUntargetSkill();
  void GetRoundList(std::vector<ObjInfo> & _return);
  void send_GetRoundList();
  void recv_GetRoundList(std::vector<ObjInfo> & _return);
  void GetRoundListTest(std::vector<ObjInfo> & _return);
  void send_GetRoundListTest();
  void recv_GetRoundListTest(std::vector<ObjInfo> & _return);
  void GetPlayerInfo(PlayerInfo& _return);
  void send_GetPlayerInfo();
  void recv_GetPlayerInfo(PlayerInfo& _return);
  void StopMove();
  void send_StopMove();
  void recv_StopMove();
  void GetMapData(MapInfo& _return);
  void send_GetMapData();
  void recv_GetMapData(MapInfo& _return);
  void ActiveTarget(const int32_t ObjPtr);
  void send_ActiveTarget(const int32_t ObjPtr);
  void recv_ActiveTarget();
  void GetWaypointInfo(std::vector<WaypointInfo> & _return);
  void send_GetWaypointInfo();
  void recv_GetWaypointInfo(std::vector<WaypointInfo> & _return);
  void Transport(const int32_t MapID, const int32_t WaypointID, const int32_t DungeonModel);
  void send_Transport(const int32_t MapID, const int32_t WaypointID, const int32_t DungeonModel);
  void recv_Transport();
  void GetContainerItemList(std::vector<ItemInfo> & _return, const int32_t GetType);
  void send_GetContainerItemList(const int32_t GetType);
  void recv_GetContainerItemList(std::vector<ItemInfo> & _return);
  void GetBagItemSpaceInfo(std::vector<ItemSpaceInfo> & _return);
  void send_GetBagItemSpaceInfo();
  void recv_GetBagItemSpaceInfo(std::vector<ItemSpaceInfo> & _return);
  void GetCurrentMapInfo(WaypointInfo& _return);
  void send_GetCurrentMapInfo();
  void recv_GetCurrentMapInfo(WaypointInfo& _return);
  int32_t GetCurrentMapID();
  void send_GetCurrentMapID();
  int32_t recv_GetCurrentMapID();
  void GetTrophyInfo(TrophyInfo& _return, const int32_t TrophyObjPtr);
  void send_GetTrophyInfo(const int32_t TrophyObjPtr);
  void recv_GetTrophyInfo(TrophyInfo& _return);
  int32_t SetLootTypeList(const std::vector<LootType> & LootList);
  void send_SetLootTypeList(const std::vector<LootType> & LootList);
  int32_t recv_SetLootTypeList();
  void GetTrophyList(std::vector<TrophyInfo> & _return, const std::vector<TrophyBaseInfo> & TrophyIDList);
  void send_GetTrophyList(const std::vector<TrophyBaseInfo> & TrophyIDList);
  void recv_GetTrophyList(std::vector<TrophyInfo> & _return);
  int32_t ReadLoginState();
  void send_ReadLoginState();
  int32_t recv_ReadLoginState();
  int32_t UseItem(const int32_t WinID, const int32_t ServiceID);
  void send_UseItem(const int32_t WinID, const int32_t ServiceID);
  int32_t recv_UseItem();
  int32_t UseTransDoor();
  void send_UseTransDoor();
  int32_t recv_UseTransDoor();
  int32_t ClickNPCMenu(const int32_t MenuID);
  void send_ClickNPCMenu(const int32_t MenuID);
  int32_t recv_ClickNPCMenu();
  int32_t PutToSell(const int32_t Left, const int32_t Top, const int32_t ServiceID, const int32_t WinID);
  void send_PutToSell(const int32_t Left, const int32_t Top, const int32_t ServiceID, const int32_t WinID);
  int32_t recv_PutToSell();
  int32_t ConfirmSell();
  void send_ConfirmSell();
  int32_t recv_ConfirmSell();
  int32_t ReturnChoseRole();
  void send_ReturnChoseRole();
  int32_t recv_ReturnChoseRole();
  int32_t Relive(const int32_t ReliveType);
  void send_Relive(const int32_t ReliveType);
  int32_t recv_Relive();
  int32_t GetNearbyWaypointID();
  void send_GetNearbyWaypointID();
  int32_t recv_GetNearbyWaypointID();
  int32_t GetNearbySellNPCObjPtr(const int32_t NPCNum);
  void send_GetNearbySellNPCObjPtr(const int32_t NPCNum);
  int32_t recv_GetNearbySellNPCObjPtr();
  int32_t GetNearbyGoCityTransferDoorObjPtr();
  void send_GetNearbyGoCityTransferDoorObjPtr();
  int32_t recv_GetNearbyGoCityTransferDoorObjPtr();
  int32_t GetNearbyGoBattleTransfetDoorObjPtr();
  void send_GetNearbyGoBattleTransfetDoorObjPtr();
  int32_t recv_GetNearbyGoBattleTransfetDoorObjPtr();
  int32_t GetNearbyStorageObjPtr();
  void send_GetNearbyStorageObjPtr();
  int32_t recv_GetNearbyStorageObjPtr();
  int32_t GetNearbyCrossObjPtr();
  void send_GetNearbyCrossObjPtr();
  int32_t recv_GetNearbyCrossObjPtr();
  int32_t PickupItem(const int32_t BagObjPtr, const int32_t ItemServiceID);
  void send_PickupItem(const int32_t BagObjPtr, const int32_t ItemServiceID);
  int32_t recv_PickupItem();
  int32_t DropdownItem(const int32_t StoragePageObjPtr, const int16_t Left, const int16_t Top);
  void send_DropdownItem(const int32_t StoragePageObjPtr, const int16_t Left, const int16_t Top);
  int32_t recv_DropdownItem();
  int32_t ActiveStoragePageInfo(const int32_t PageNum);
  void send_ActiveStoragePageInfo(const int32_t PageNum);
  int32_t recv_ActiveStoragePageInfo();
  int32_t GetStoragePagePtr(const int32_t ContainerNum);
  void send_GetStoragePagePtr(const int32_t ContainerNum);
  int32_t recv_GetStoragePagePtr();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GameFuncCallProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GameFuncCallIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GameFuncCallProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SetUID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsValidServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Test(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetWorkPath(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPlayerPos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Move(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CastUntargetSkill(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRoundList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRoundListTest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPlayerInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StopMove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMapData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ActiveTarget(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetWaypointInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Transport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetContainerItemList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetBagItemSpaceInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCurrentMapInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCurrentMapID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTrophyInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetLootTypeList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTrophyList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReadLoginState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UseItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UseTransDoor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ClickNPCMenu(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PutToSell(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ConfirmSell(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReturnChoseRole(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Relive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNearbyWaypointID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNearbySellNPCObjPtr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNearbyGoCityTransferDoorObjPtr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNearbyGoBattleTransfetDoorObjPtr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNearbyStorageObjPtr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNearbyCrossObjPtr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PickupItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DropdownItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ActiveStoragePageInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetStoragePagePtr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GameFuncCallProcessor(boost::shared_ptr<GameFuncCallIf> iface) :
    iface_(iface) {
    processMap_["SetUID"] = &GameFuncCallProcessor::process_SetUID;
    processMap_["IsValidServer"] = &GameFuncCallProcessor::process_IsValidServer;
    processMap_["Test"] = &GameFuncCallProcessor::process_Test;
    processMap_["Update"] = &GameFuncCallProcessor::process_Update;
    processMap_["SetWorkPath"] = &GameFuncCallProcessor::process_SetWorkPath;
    processMap_["GetPlayerPos"] = &GameFuncCallProcessor::process_GetPlayerPos;
    processMap_["Move"] = &GameFuncCallProcessor::process_Move;
    processMap_["CastUntargetSkill"] = &GameFuncCallProcessor::process_CastUntargetSkill;
    processMap_["GetRoundList"] = &GameFuncCallProcessor::process_GetRoundList;
    processMap_["GetRoundListTest"] = &GameFuncCallProcessor::process_GetRoundListTest;
    processMap_["GetPlayerInfo"] = &GameFuncCallProcessor::process_GetPlayerInfo;
    processMap_["StopMove"] = &GameFuncCallProcessor::process_StopMove;
    processMap_["GetMapData"] = &GameFuncCallProcessor::process_GetMapData;
    processMap_["ActiveTarget"] = &GameFuncCallProcessor::process_ActiveTarget;
    processMap_["GetWaypointInfo"] = &GameFuncCallProcessor::process_GetWaypointInfo;
    processMap_["Transport"] = &GameFuncCallProcessor::process_Transport;
    processMap_["GetContainerItemList"] = &GameFuncCallProcessor::process_GetContainerItemList;
    processMap_["GetBagItemSpaceInfo"] = &GameFuncCallProcessor::process_GetBagItemSpaceInfo;
    processMap_["GetCurrentMapInfo"] = &GameFuncCallProcessor::process_GetCurrentMapInfo;
    processMap_["GetCurrentMapID"] = &GameFuncCallProcessor::process_GetCurrentMapID;
    processMap_["GetTrophyInfo"] = &GameFuncCallProcessor::process_GetTrophyInfo;
    processMap_["SetLootTypeList"] = &GameFuncCallProcessor::process_SetLootTypeList;
    processMap_["GetTrophyList"] = &GameFuncCallProcessor::process_GetTrophyList;
    processMap_["ReadLoginState"] = &GameFuncCallProcessor::process_ReadLoginState;
    processMap_["UseItem"] = &GameFuncCallProcessor::process_UseItem;
    processMap_["UseTransDoor"] = &GameFuncCallProcessor::process_UseTransDoor;
    processMap_["ClickNPCMenu"] = &GameFuncCallProcessor::process_ClickNPCMenu;
    processMap_["PutToSell"] = &GameFuncCallProcessor::process_PutToSell;
    processMap_["ConfirmSell"] = &GameFuncCallProcessor::process_ConfirmSell;
    processMap_["ReturnChoseRole"] = &GameFuncCallProcessor::process_ReturnChoseRole;
    processMap_["Relive"] = &GameFuncCallProcessor::process_Relive;
    processMap_["GetNearbyWaypointID"] = &GameFuncCallProcessor::process_GetNearbyWaypointID;
    processMap_["GetNearbySellNPCObjPtr"] = &GameFuncCallProcessor::process_GetNearbySellNPCObjPtr;
    processMap_["GetNearbyGoCityTransferDoorObjPtr"] = &GameFuncCallProcessor::process_GetNearbyGoCityTransferDoorObjPtr;
    processMap_["GetNearbyGoBattleTransfetDoorObjPtr"] = &GameFuncCallProcessor::process_GetNearbyGoBattleTransfetDoorObjPtr;
    processMap_["GetNearbyStorageObjPtr"] = &GameFuncCallProcessor::process_GetNearbyStorageObjPtr;
    processMap_["GetNearbyCrossObjPtr"] = &GameFuncCallProcessor::process_GetNearbyCrossObjPtr;
    processMap_["PickupItem"] = &GameFuncCallProcessor::process_PickupItem;
    processMap_["DropdownItem"] = &GameFuncCallProcessor::process_DropdownItem;
    processMap_["ActiveStoragePageInfo"] = &GameFuncCallProcessor::process_ActiveStoragePageInfo;
    processMap_["GetStoragePagePtr"] = &GameFuncCallProcessor::process_GetStoragePagePtr;
  }

  virtual ~GameFuncCallProcessor() {}
};

class GameFuncCallProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GameFuncCallProcessorFactory(const ::boost::shared_ptr< GameFuncCallIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GameFuncCallIfFactory > handlerFactory_;
};

class GameFuncCallMultiface : virtual public GameFuncCallIf {
 public:
  GameFuncCallMultiface(std::vector<boost::shared_ptr<GameFuncCallIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GameFuncCallMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GameFuncCallIf> > ifaces_;
  GameFuncCallMultiface() {}
  void add(boost::shared_ptr<GameFuncCallIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t SetUID(const std::string& strUID, const std::string& strPWD) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetUID(strUID, strPWD);
    }
    return ifaces_[i]->SetUID(strUID, strPWD);
  }

  bool IsValidServer() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->IsValidServer();
    }
    return ifaces_[i]->IsValidServer();
  }

  void Test() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Test();
    }
    ifaces_[i]->Test();
  }

  void Update() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Update();
    }
    ifaces_[i]->Update();
  }

  void SetWorkPath(const std::string& strPath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetWorkPath(strPath);
    }
    ifaces_[i]->SetWorkPath(strPath);
  }

  void GetPlayerPos(Pos& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPlayerPos(_return);
    }
    ifaces_[i]->GetPlayerPos(_return);
    return;
  }

  void Move(const int32_t x, const int32_t y) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Move(x, y);
    }
    ifaces_[i]->Move(x, y);
  }

  void CastUntargetSkill(const int16_t x, const int16_t y, const int16_t skillNum, const int16_t castType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CastUntargetSkill(x, y, skillNum, castType);
    }
    ifaces_[i]->CastUntargetSkill(x, y, skillNum, castType);
  }

  void GetRoundList(std::vector<ObjInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRoundList(_return);
    }
    ifaces_[i]->GetRoundList(_return);
    return;
  }

  void GetRoundListTest(std::vector<ObjInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRoundListTest(_return);
    }
    ifaces_[i]->GetRoundListTest(_return);
    return;
  }

  void GetPlayerInfo(PlayerInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPlayerInfo(_return);
    }
    ifaces_[i]->GetPlayerInfo(_return);
    return;
  }

  void StopMove() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StopMove();
    }
    ifaces_[i]->StopMove();
  }

  void GetMapData(MapInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMapData(_return);
    }
    ifaces_[i]->GetMapData(_return);
    return;
  }

  void ActiveTarget(const int32_t ObjPtr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ActiveTarget(ObjPtr);
    }
    ifaces_[i]->ActiveTarget(ObjPtr);
  }

  void GetWaypointInfo(std::vector<WaypointInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetWaypointInfo(_return);
    }
    ifaces_[i]->GetWaypointInfo(_return);
    return;
  }

  void Transport(const int32_t MapID, const int32_t WaypointID, const int32_t DungeonModel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Transport(MapID, WaypointID, DungeonModel);
    }
    ifaces_[i]->Transport(MapID, WaypointID, DungeonModel);
  }

  void GetContainerItemList(std::vector<ItemInfo> & _return, const int32_t GetType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetContainerItemList(_return, GetType);
    }
    ifaces_[i]->GetContainerItemList(_return, GetType);
    return;
  }

  void GetBagItemSpaceInfo(std::vector<ItemSpaceInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetBagItemSpaceInfo(_return);
    }
    ifaces_[i]->GetBagItemSpaceInfo(_return);
    return;
  }

  void GetCurrentMapInfo(WaypointInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCurrentMapInfo(_return);
    }
    ifaces_[i]->GetCurrentMapInfo(_return);
    return;
  }

  int32_t GetCurrentMapID() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCurrentMapID();
    }
    return ifaces_[i]->GetCurrentMapID();
  }

  void GetTrophyInfo(TrophyInfo& _return, const int32_t TrophyObjPtr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTrophyInfo(_return, TrophyObjPtr);
    }
    ifaces_[i]->GetTrophyInfo(_return, TrophyObjPtr);
    return;
  }

  int32_t SetLootTypeList(const std::vector<LootType> & LootList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetLootTypeList(LootList);
    }
    return ifaces_[i]->SetLootTypeList(LootList);
  }

  void GetTrophyList(std::vector<TrophyInfo> & _return, const std::vector<TrophyBaseInfo> & TrophyIDList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTrophyList(_return, TrophyIDList);
    }
    ifaces_[i]->GetTrophyList(_return, TrophyIDList);
    return;
  }

  int32_t ReadLoginState() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadLoginState();
    }
    return ifaces_[i]->ReadLoginState();
  }

  int32_t UseItem(const int32_t WinID, const int32_t ServiceID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UseItem(WinID, ServiceID);
    }
    return ifaces_[i]->UseItem(WinID, ServiceID);
  }

  int32_t UseTransDoor() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UseTransDoor();
    }
    return ifaces_[i]->UseTransDoor();
  }

  int32_t ClickNPCMenu(const int32_t MenuID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ClickNPCMenu(MenuID);
    }
    return ifaces_[i]->ClickNPCMenu(MenuID);
  }

  int32_t PutToSell(const int32_t Left, const int32_t Top, const int32_t ServiceID, const int32_t WinID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PutToSell(Left, Top, ServiceID, WinID);
    }
    return ifaces_[i]->PutToSell(Left, Top, ServiceID, WinID);
  }

  int32_t ConfirmSell() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConfirmSell();
    }
    return ifaces_[i]->ConfirmSell();
  }

  int32_t ReturnChoseRole() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReturnChoseRole();
    }
    return ifaces_[i]->ReturnChoseRole();
  }

  int32_t Relive(const int32_t ReliveType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Relive(ReliveType);
    }
    return ifaces_[i]->Relive(ReliveType);
  }

  int32_t GetNearbyWaypointID() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNearbyWaypointID();
    }
    return ifaces_[i]->GetNearbyWaypointID();
  }

  int32_t GetNearbySellNPCObjPtr(const int32_t NPCNum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNearbySellNPCObjPtr(NPCNum);
    }
    return ifaces_[i]->GetNearbySellNPCObjPtr(NPCNum);
  }

  int32_t GetNearbyGoCityTransferDoorObjPtr() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNearbyGoCityTransferDoorObjPtr();
    }
    return ifaces_[i]->GetNearbyGoCityTransferDoorObjPtr();
  }

  int32_t GetNearbyGoBattleTransfetDoorObjPtr() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNearbyGoBattleTransfetDoorObjPtr();
    }
    return ifaces_[i]->GetNearbyGoBattleTransfetDoorObjPtr();
  }

  int32_t GetNearbyStorageObjPtr() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNearbyStorageObjPtr();
    }
    return ifaces_[i]->GetNearbyStorageObjPtr();
  }

  int32_t GetNearbyCrossObjPtr() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNearbyCrossObjPtr();
    }
    return ifaces_[i]->GetNearbyCrossObjPtr();
  }

  int32_t PickupItem(const int32_t BagObjPtr, const int32_t ItemServiceID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PickupItem(BagObjPtr, ItemServiceID);
    }
    return ifaces_[i]->PickupItem(BagObjPtr, ItemServiceID);
  }

  int32_t DropdownItem(const int32_t StoragePageObjPtr, const int16_t Left, const int16_t Top) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DropdownItem(StoragePageObjPtr, Left, Top);
    }
    return ifaces_[i]->DropdownItem(StoragePageObjPtr, Left, Top);
  }

  int32_t ActiveStoragePageInfo(const int32_t PageNum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ActiveStoragePageInfo(PageNum);
    }
    return ifaces_[i]->ActiveStoragePageInfo(PageNum);
  }

  int32_t GetStoragePagePtr(const int32_t ContainerNum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetStoragePagePtr(ContainerNum);
    }
    return ifaces_[i]->GetStoragePagePtr(ContainerNum);
  }

};

}} // namespace

#endif
