/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GameCall_TYPES_H
#define GameCall_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace thrift { namespace GameCall {

typedef struct _Pos__isset {
  _Pos__isset() : x(false), y(false) {}
  bool x;
  bool y;
} _Pos__isset;

class Pos {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  Pos() : x(0), y(0) {
  }

  virtual ~Pos() throw() {}

  double x;
  double y;

  _Pos__isset __isset;

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  bool operator == (const Pos & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const Pos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Pos &a, Pos &b);

typedef struct _PlayerInfo__isset {
  _PlayerInfo__isset() : X(false), Y(false), name(false), HP(false), MaxHP(false), Level(false), MP(false), MaxMP(false), ActorCode(false) {}
  bool X;
  bool Y;
  bool name;
  bool HP;
  bool MaxHP;
  bool Level;
  bool MP;
  bool MaxMP;
  bool ActorCode;
} _PlayerInfo__isset;

class PlayerInfo {
 public:

  static const char* ascii_fingerprint; // = "C476BE5970E6001F1630CDBC98CFB9D8";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x76,0xBE,0x59,0x70,0xE6,0x00,0x1F,0x16,0x30,0xCD,0xBC,0x98,0xCF,0xB9,0xD8};

  PlayerInfo() : X(0), Y(0), HP(0), MaxHP(0), Level(0), MP(0), MaxMP(0), ActorCode(0) {
  }

  virtual ~PlayerInfo() throw() {}

  int32_t X;
  int32_t Y;
  std::vector<int8_t>  name;
  int32_t HP;
  int32_t MaxHP;
  int32_t Level;
  int32_t MP;
  int32_t MaxMP;
  int32_t ActorCode;

  _PlayerInfo__isset __isset;

  void __set_X(const int32_t val) {
    X = val;
  }

  void __set_Y(const int32_t val) {
    Y = val;
  }

  void __set_name(const std::vector<int8_t> & val) {
    name = val;
  }

  void __set_HP(const int32_t val) {
    HP = val;
  }

  void __set_MaxHP(const int32_t val) {
    MaxHP = val;
  }

  void __set_Level(const int32_t val) {
    Level = val;
  }

  void __set_MP(const int32_t val) {
    MP = val;
  }

  void __set_MaxMP(const int32_t val) {
    MaxMP = val;
  }

  void __set_ActorCode(const int32_t val) {
    ActorCode = val;
  }

  bool operator == (const PlayerInfo & rhs) const
  {
    if (!(X == rhs.X))
      return false;
    if (!(Y == rhs.Y))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(HP == rhs.HP))
      return false;
    if (!(MaxHP == rhs.MaxHP))
      return false;
    if (!(Level == rhs.Level))
      return false;
    if (!(MP == rhs.MP))
      return false;
    if (!(MaxMP == rhs.MaxMP))
      return false;
    if (!(ActorCode == rhs.ActorCode))
      return false;
    return true;
  }
  bool operator != (const PlayerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayerInfo &a, PlayerInfo &b);

typedef struct _ObjInfo__isset {
  _ObjInfo__isset() : Type(false), ObjPtr(false), ID(false), EnemyID(false), HP(false), MaxHP(false), Level(false), X(false), Y(false), Name(false), TypeName(false) {}
  bool Type;
  bool ObjPtr;
  bool ID;
  bool EnemyID;
  bool HP;
  bool MaxHP;
  bool Level;
  bool X;
  bool Y;
  bool Name;
  bool TypeName;
} _ObjInfo__isset;

class ObjInfo {
 public:

  static const char* ascii_fingerprint; // = "37EFDB3D4050F2B06C361C42793C14D0";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0xEF,0xDB,0x3D,0x40,0x50,0xF2,0xB0,0x6C,0x36,0x1C,0x42,0x79,0x3C,0x14,0xD0};

  ObjInfo() : Type(0), ObjPtr(0), ID(0), EnemyID(0), HP(0), MaxHP(0), Level(0), X(0), Y(0) {
  }

  virtual ~ObjInfo() throw() {}

  int8_t Type;
  int32_t ObjPtr;
  int32_t ID;
  int32_t EnemyID;
  int32_t HP;
  int32_t MaxHP;
  int32_t Level;
  int32_t X;
  int32_t Y;
  std::vector<int8_t>  Name;
  std::vector<int8_t>  TypeName;

  _ObjInfo__isset __isset;

  void __set_Type(const int8_t val) {
    Type = val;
  }

  void __set_ObjPtr(const int32_t val) {
    ObjPtr = val;
  }

  void __set_ID(const int32_t val) {
    ID = val;
  }

  void __set_EnemyID(const int32_t val) {
    EnemyID = val;
  }

  void __set_HP(const int32_t val) {
    HP = val;
  }

  void __set_MaxHP(const int32_t val) {
    MaxHP = val;
  }

  void __set_Level(const int32_t val) {
    Level = val;
  }

  void __set_X(const int32_t val) {
    X = val;
  }

  void __set_Y(const int32_t val) {
    Y = val;
  }

  void __set_Name(const std::vector<int8_t> & val) {
    Name = val;
  }

  void __set_TypeName(const std::vector<int8_t> & val) {
    TypeName = val;
  }

  bool operator == (const ObjInfo & rhs) const
  {
    if (!(Type == rhs.Type))
      return false;
    if (!(ObjPtr == rhs.ObjPtr))
      return false;
    if (!(ID == rhs.ID))
      return false;
    if (!(EnemyID == rhs.EnemyID))
      return false;
    if (!(HP == rhs.HP))
      return false;
    if (!(MaxHP == rhs.MaxHP))
      return false;
    if (!(Level == rhs.Level))
      return false;
    if (!(X == rhs.X))
      return false;
    if (!(Y == rhs.Y))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(TypeName == rhs.TypeName))
      return false;
    return true;
  }
  bool operator != (const ObjInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ObjInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ObjInfo &a, ObjInfo &b);

typedef struct _MapInfo__isset {
  _MapInfo__isset() : HalfX(false), X(false), Y(false), MapData(false) {}
  bool HalfX;
  bool X;
  bool Y;
  bool MapData;
} _MapInfo__isset;

class MapInfo {
 public:

  static const char* ascii_fingerprint; // = "DA28266E6B4ECC8AA1B5C61BED69AD00";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x28,0x26,0x6E,0x6B,0x4E,0xCC,0x8A,0xA1,0xB5,0xC6,0x1B,0xED,0x69,0xAD,0x00};

  MapInfo() : HalfX(0), X(0), Y(0) {
  }

  virtual ~MapInfo() throw() {}

  int32_t HalfX;
  int32_t X;
  int32_t Y;
  std::vector<int8_t>  MapData;

  _MapInfo__isset __isset;

  void __set_HalfX(const int32_t val) {
    HalfX = val;
  }

  void __set_X(const int32_t val) {
    X = val;
  }

  void __set_Y(const int32_t val) {
    Y = val;
  }

  void __set_MapData(const std::vector<int8_t> & val) {
    MapData = val;
  }

  bool operator == (const MapInfo & rhs) const
  {
    if (!(HalfX == rhs.HalfX))
      return false;
    if (!(X == rhs.X))
      return false;
    if (!(Y == rhs.Y))
      return false;
    if (!(MapData == rhs.MapData))
      return false;
    return true;
  }
  bool operator != (const MapInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MapInfo &a, MapInfo &b);

typedef struct _WaypointInfo__isset {
  _WaypointInfo__isset() : Mem(false), ID(false), ActName(false), Name(false) {}
  bool Mem;
  bool ID;
  bool ActName;
  bool Name;
} _WaypointInfo__isset;

class WaypointInfo {
 public:

  static const char* ascii_fingerprint; // = "52E928B279D52D33CF89AE6A39B1C4FC";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xE9,0x28,0xB2,0x79,0xD5,0x2D,0x33,0xCF,0x89,0xAE,0x6A,0x39,0xB1,0xC4,0xFC};

  WaypointInfo() : Mem(0), ID(0) {
  }

  virtual ~WaypointInfo() throw() {}

  int32_t Mem;
  int32_t ID;
  std::vector<int8_t>  ActName;
  std::vector<int8_t>  Name;

  _WaypointInfo__isset __isset;

  void __set_Mem(const int32_t val) {
    Mem = val;
  }

  void __set_ID(const int32_t val) {
    ID = val;
  }

  void __set_ActName(const std::vector<int8_t> & val) {
    ActName = val;
  }

  void __set_Name(const std::vector<int8_t> & val) {
    Name = val;
  }

  bool operator == (const WaypointInfo & rhs) const
  {
    if (!(Mem == rhs.Mem))
      return false;
    if (!(ID == rhs.ID))
      return false;
    if (!(ActName == rhs.ActName))
      return false;
    if (!(Name == rhs.Name))
      return false;
    return true;
  }
  bool operator != (const WaypointInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WaypointInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WaypointInfo &a, WaypointInfo &b);

typedef struct _ItemSpaceInfo__isset {
  _ItemSpaceInfo__isset() : Left(false), Top(false), Width(false), Height(false) {}
  bool Left;
  bool Top;
  bool Width;
  bool Height;
} _ItemSpaceInfo__isset;

class ItemSpaceInfo {
 public:

  static const char* ascii_fingerprint; // = "AA71A2015E3E33A091725A4FF3DB491D";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x71,0xA2,0x01,0x5E,0x3E,0x33,0xA0,0x91,0x72,0x5A,0x4F,0xF3,0xDB,0x49,0x1D};

  ItemSpaceInfo() : Left(0), Top(0), Width(0), Height(0) {
  }

  virtual ~ItemSpaceInfo() throw() {}

  int16_t Left;
  int16_t Top;
  int16_t Width;
  int16_t Height;

  _ItemSpaceInfo__isset __isset;

  void __set_Left(const int16_t val) {
    Left = val;
  }

  void __set_Top(const int16_t val) {
    Top = val;
  }

  void __set_Width(const int16_t val) {
    Width = val;
  }

  void __set_Height(const int16_t val) {
    Height = val;
  }

  bool operator == (const ItemSpaceInfo & rhs) const
  {
    if (!(Left == rhs.Left))
      return false;
    if (!(Top == rhs.Top))
      return false;
    if (!(Width == rhs.Width))
      return false;
    if (!(Height == rhs.Height))
      return false;
    return true;
  }
  bool operator != (const ItemSpaceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ItemSpaceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ItemSpaceInfo &a, ItemSpaceInfo &b);

typedef struct _ItemInfo__isset {
  _ItemInfo__isset() : ObjPtr(false), ID(false), ServiceID(false), WinID(false), BagObjPtr(false), Color(false), Count(false), Width(false), Height(false), Left(false), Top(false), Type(false), Name(false) {}
  bool ObjPtr;
  bool ID;
  bool ServiceID;
  bool WinID;
  bool BagObjPtr;
  bool Color;
  bool Count;
  bool Width;
  bool Height;
  bool Left;
  bool Top;
  bool Type;
  bool Name;
} _ItemInfo__isset;

class ItemInfo {
 public:

  static const char* ascii_fingerprint; // = "1E961C3A7F4B2678E546762BBC657BB7";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x96,0x1C,0x3A,0x7F,0x4B,0x26,0x78,0xE5,0x46,0x76,0x2B,0xBC,0x65,0x7B,0xB7};

  ItemInfo() : ObjPtr(0), ID(0), ServiceID(0), WinID(0), BagObjPtr(0), Color(0), Count(0), Width(0), Height(0), Left(0), Top(0), Type(0) {
  }

  virtual ~ItemInfo() throw() {}

  int32_t ObjPtr;
  int32_t ID;
  int32_t ServiceID;
  int32_t WinID;
  int32_t BagObjPtr;
  int16_t Color;
  int16_t Count;
  int16_t Width;
  int16_t Height;
  int16_t Left;
  int16_t Top;
  int16_t Type;
  std::vector<int8_t>  Name;

  _ItemInfo__isset __isset;

  void __set_ObjPtr(const int32_t val) {
    ObjPtr = val;
  }

  void __set_ID(const int32_t val) {
    ID = val;
  }

  void __set_ServiceID(const int32_t val) {
    ServiceID = val;
  }

  void __set_WinID(const int32_t val) {
    WinID = val;
  }

  void __set_BagObjPtr(const int32_t val) {
    BagObjPtr = val;
  }

  void __set_Color(const int16_t val) {
    Color = val;
  }

  void __set_Count(const int16_t val) {
    Count = val;
  }

  void __set_Width(const int16_t val) {
    Width = val;
  }

  void __set_Height(const int16_t val) {
    Height = val;
  }

  void __set_Left(const int16_t val) {
    Left = val;
  }

  void __set_Top(const int16_t val) {
    Top = val;
  }

  void __set_Type(const int16_t val) {
    Type = val;
  }

  void __set_Name(const std::vector<int8_t> & val) {
    Name = val;
  }

  bool operator == (const ItemInfo & rhs) const
  {
    if (!(ObjPtr == rhs.ObjPtr))
      return false;
    if (!(ID == rhs.ID))
      return false;
    if (!(ServiceID == rhs.ServiceID))
      return false;
    if (!(WinID == rhs.WinID))
      return false;
    if (!(BagObjPtr == rhs.BagObjPtr))
      return false;
    if (!(Color == rhs.Color))
      return false;
    if (!(Count == rhs.Count))
      return false;
    if (!(Width == rhs.Width))
      return false;
    if (!(Height == rhs.Height))
      return false;
    if (!(Left == rhs.Left))
      return false;
    if (!(Top == rhs.Top))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(Name == rhs.Name))
      return false;
    return true;
  }
  bool operator != (const ItemInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ItemInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ItemInfo &a, ItemInfo &b);

typedef struct _TrophyBaseInfo__isset {
  _TrophyBaseInfo__isset() : ObjPtr(false), X(false), Y(false) {}
  bool ObjPtr;
  bool X;
  bool Y;
} _TrophyBaseInfo__isset;

class TrophyBaseInfo {
 public:

  static const char* ascii_fingerprint; // = "20CDC9D979DE694980EA2466496D8E68";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xCD,0xC9,0xD9,0x79,0xDE,0x69,0x49,0x80,0xEA,0x24,0x66,0x49,0x6D,0x8E,0x68};

  TrophyBaseInfo() : ObjPtr(0), X(0), Y(0) {
  }

  virtual ~TrophyBaseInfo() throw() {}

  int32_t ObjPtr;
  int16_t X;
  int16_t Y;

  _TrophyBaseInfo__isset __isset;

  void __set_ObjPtr(const int32_t val) {
    ObjPtr = val;
  }

  void __set_X(const int16_t val) {
    X = val;
  }

  void __set_Y(const int16_t val) {
    Y = val;
  }

  bool operator == (const TrophyBaseInfo & rhs) const
  {
    if (!(ObjPtr == rhs.ObjPtr))
      return false;
    if (!(X == rhs.X))
      return false;
    if (!(Y == rhs.Y))
      return false;
    return true;
  }
  bool operator != (const TrophyBaseInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TrophyBaseInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TrophyBaseInfo &a, TrophyBaseInfo &b);

typedef struct _TrophyInfo__isset {
  _TrophyInfo__isset() : ObjPtr(false), ID(false), Type(false), Color(false), Width(false), Height(false), X(false), Y(false), Name(false) {}
  bool ObjPtr;
  bool ID;
  bool Type;
  bool Color;
  bool Width;
  bool Height;
  bool X;
  bool Y;
  bool Name;
} _TrophyInfo__isset;

class TrophyInfo {
 public:

  static const char* ascii_fingerprint; // = "5A136AEC343B9D58E8DD347EB329421D";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x13,0x6A,0xEC,0x34,0x3B,0x9D,0x58,0xE8,0xDD,0x34,0x7E,0xB3,0x29,0x42,0x1D};

  TrophyInfo() : ObjPtr(0), ID(0), Type(0), Color(0), Width(0), Height(0), X(0), Y(0) {
  }

  virtual ~TrophyInfo() throw() {}

  int32_t ObjPtr;
  int32_t ID;
  int16_t Type;
  int16_t Color;
  int16_t Width;
  int16_t Height;
  int16_t X;
  int16_t Y;
  std::vector<int8_t>  Name;

  _TrophyInfo__isset __isset;

  void __set_ObjPtr(const int32_t val) {
    ObjPtr = val;
  }

  void __set_ID(const int32_t val) {
    ID = val;
  }

  void __set_Type(const int16_t val) {
    Type = val;
  }

  void __set_Color(const int16_t val) {
    Color = val;
  }

  void __set_Width(const int16_t val) {
    Width = val;
  }

  void __set_Height(const int16_t val) {
    Height = val;
  }

  void __set_X(const int16_t val) {
    X = val;
  }

  void __set_Y(const int16_t val) {
    Y = val;
  }

  void __set_Name(const std::vector<int8_t> & val) {
    Name = val;
  }

  bool operator == (const TrophyInfo & rhs) const
  {
    if (!(ObjPtr == rhs.ObjPtr))
      return false;
    if (!(ID == rhs.ID))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(Color == rhs.Color))
      return false;
    if (!(Width == rhs.Width))
      return false;
    if (!(Height == rhs.Height))
      return false;
    if (!(X == rhs.X))
      return false;
    if (!(Y == rhs.Y))
      return false;
    if (!(Name == rhs.Name))
      return false;
    return true;
  }
  bool operator != (const TrophyInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TrophyInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TrophyInfo &a, TrophyInfo &b);

typedef struct _LootType__isset {
  _LootType__isset() : Type(false), Color(false) {}
  bool Type;
  bool Color;
} _LootType__isset;

class LootType {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  LootType() : Type(0), Color(0) {
  }

  virtual ~LootType() throw() {}

  int32_t Type;
  int32_t Color;

  _LootType__isset __isset;

  void __set_Type(const int32_t val) {
    Type = val;
  }

  void __set_Color(const int32_t val) {
    Color = val;
  }

  bool operator == (const LootType & rhs) const
  {
    if (!(Type == rhs.Type))
      return false;
    if (!(Color == rhs.Color))
      return false;
    return true;
  }
  bool operator != (const LootType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LootType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LootType &a, LootType &b);

}} // namespace

#endif
