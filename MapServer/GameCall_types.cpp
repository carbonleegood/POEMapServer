/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "stdafx.h"
#include "GameCall_types.h"

#include <algorithm>

namespace thrift { namespace GameCall {

const char* Pos::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t Pos::binary_fingerprint[16] = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

uint32_t Pos::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Pos::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Pos");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Pos &a, Pos &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.__isset, b.__isset);
}

const char* PlayerInfo::ascii_fingerprint = "C476BE5970E6001F1630CDBC98CFB9D8";
const uint8_t PlayerInfo::binary_fingerprint[16] = {0xC4,0x76,0xBE,0x59,0x70,0xE6,0x00,0x1F,0x16,0x30,0xCD,0xBC,0x98,0xCF,0xB9,0xD8};

uint32_t PlayerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->X);
          this->__isset.X = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Y);
          this->__isset.Y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->name.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->name.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readByte(this->name[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->HP);
          this->__isset.HP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->MaxHP);
          this->__isset.MaxHP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Level);
          this->__isset.Level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->MP);
          this->__isset.MP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->MaxMP);
          this->__isset.MaxMP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ActorCode);
          this->__isset.ActorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlayerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlayerInfo");

  xfer += oprot->writeFieldBegin("X", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->X);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Y", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->name.size()));
    std::vector<int8_t> ::const_iterator _iter5;
    for (_iter5 = this->name.begin(); _iter5 != this->name.end(); ++_iter5)
    {
      xfer += oprot->writeByte((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HP", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->HP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaxHP", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->MaxHP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Level", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->Level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MP", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->MP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaxMP", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->MaxMP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ActorCode", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->ActorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerInfo &a, PlayerInfo &b) {
  using ::std::swap;
  swap(a.X, b.X);
  swap(a.Y, b.Y);
  swap(a.name, b.name);
  swap(a.HP, b.HP);
  swap(a.MaxHP, b.MaxHP);
  swap(a.Level, b.Level);
  swap(a.MP, b.MP);
  swap(a.MaxMP, b.MaxMP);
  swap(a.ActorCode, b.ActorCode);
  swap(a.__isset, b.__isset);
}

const char* ObjInfo::ascii_fingerprint = "37EFDB3D4050F2B06C361C42793C14D0";
const uint8_t ObjInfo::binary_fingerprint[16] = {0x37,0xEF,0xDB,0x3D,0x40,0x50,0xF2,0xB0,0x6C,0x36,0x1C,0x42,0x79,0x3C,0x14,0xD0};

uint32_t ObjInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Type);
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ObjPtr);
          this->__isset.ObjPtr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ID);
          this->__isset.ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->EnemyID);
          this->__isset.EnemyID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->HP);
          this->__isset.HP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->MaxHP);
          this->__isset.MaxHP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Level);
          this->__isset.Level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->X);
          this->__isset.X = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Y);
          this->__isset.Y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Name.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->Name.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readByte(this->Name[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TypeName.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->TypeName.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += iprot->readByte(this->TypeName[_i15]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TypeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ObjInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ObjInfo");

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ObjPtr", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ObjPtr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ID", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("EnemyID", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->EnemyID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HP", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->HP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaxHP", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->MaxHP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Level", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->Level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("X", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->X);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Y", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->Y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->Name.size()));
    std::vector<int8_t> ::const_iterator _iter16;
    for (_iter16 = this->Name.begin(); _iter16 != this->Name.end(); ++_iter16)
    {
      xfer += oprot->writeByte((*_iter16));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TypeName", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->TypeName.size()));
    std::vector<int8_t> ::const_iterator _iter17;
    for (_iter17 = this->TypeName.begin(); _iter17 != this->TypeName.end(); ++_iter17)
    {
      xfer += oprot->writeByte((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ObjInfo &a, ObjInfo &b) {
  using ::std::swap;
  swap(a.Type, b.Type);
  swap(a.ObjPtr, b.ObjPtr);
  swap(a.ID, b.ID);
  swap(a.EnemyID, b.EnemyID);
  swap(a.HP, b.HP);
  swap(a.MaxHP, b.MaxHP);
  swap(a.Level, b.Level);
  swap(a.X, b.X);
  swap(a.Y, b.Y);
  swap(a.Name, b.Name);
  swap(a.TypeName, b.TypeName);
  swap(a.__isset, b.__isset);
}

const char* MapInfo::ascii_fingerprint = "DA28266E6B4ECC8AA1B5C61BED69AD00";
const uint8_t MapInfo::binary_fingerprint[16] = {0xDA,0x28,0x26,0x6E,0x6B,0x4E,0xCC,0x8A,0xA1,0xB5,0xC6,0x1B,0xED,0x69,0xAD,0x00};

uint32_t MapInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->HalfX);
          this->__isset.HalfX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->X);
          this->__isset.X = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Y);
          this->__isset.Y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MapData.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->MapData.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readByte(this->MapData[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MapData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MapInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MapInfo");

  xfer += oprot->writeFieldBegin("HalfX", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->HalfX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("X", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->X);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Y", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MapData", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->MapData.size()));
    std::vector<int8_t> ::const_iterator _iter23;
    for (_iter23 = this->MapData.begin(); _iter23 != this->MapData.end(); ++_iter23)
    {
      xfer += oprot->writeByte((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MapInfo &a, MapInfo &b) {
  using ::std::swap;
  swap(a.HalfX, b.HalfX);
  swap(a.X, b.X);
  swap(a.Y, b.Y);
  swap(a.MapData, b.MapData);
  swap(a.__isset, b.__isset);
}

const char* WaypointInfo::ascii_fingerprint = "52E928B279D52D33CF89AE6A39B1C4FC";
const uint8_t WaypointInfo::binary_fingerprint[16] = {0x52,0xE9,0x28,0xB2,0x79,0xD5,0x2D,0x33,0xCF,0x89,0xAE,0x6A,0x39,0xB1,0xC4,0xFC};

uint32_t WaypointInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Mem);
          this->__isset.Mem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ID);
          this->__isset.ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ActName.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->ActName.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += iprot->readByte(this->ActName[_i28]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ActName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Name.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readListBegin(_etype32, _size29);
            this->Name.resize(_size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              xfer += iprot->readByte(this->Name[_i33]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WaypointInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("WaypointInfo");

  xfer += oprot->writeFieldBegin("Mem", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->Mem);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ID", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ActName", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->ActName.size()));
    std::vector<int8_t> ::const_iterator _iter34;
    for (_iter34 = this->ActName.begin(); _iter34 != this->ActName.end(); ++_iter34)
    {
      xfer += oprot->writeByte((*_iter34));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->Name.size()));
    std::vector<int8_t> ::const_iterator _iter35;
    for (_iter35 = this->Name.begin(); _iter35 != this->Name.end(); ++_iter35)
    {
      xfer += oprot->writeByte((*_iter35));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WaypointInfo &a, WaypointInfo &b) {
  using ::std::swap;
  swap(a.Mem, b.Mem);
  swap(a.ID, b.ID);
  swap(a.ActName, b.ActName);
  swap(a.Name, b.Name);
  swap(a.__isset, b.__isset);
}

const char* ItemSpaceInfo::ascii_fingerprint = "AA71A2015E3E33A091725A4FF3DB491D";
const uint8_t ItemSpaceInfo::binary_fingerprint[16] = {0xAA,0x71,0xA2,0x01,0x5E,0x3E,0x33,0xA0,0x91,0x72,0x5A,0x4F,0xF3,0xDB,0x49,0x1D};

uint32_t ItemSpaceInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Left);
          this->__isset.Left = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Top);
          this->__isset.Top = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Width);
          this->__isset.Width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Height);
          this->__isset.Height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ItemSpaceInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ItemSpaceInfo");

  xfer += oprot->writeFieldBegin("Left", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->Left);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Top", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->Top);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Width", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->Width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Height", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->Height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ItemSpaceInfo &a, ItemSpaceInfo &b) {
  using ::std::swap;
  swap(a.Left, b.Left);
  swap(a.Top, b.Top);
  swap(a.Width, b.Width);
  swap(a.Height, b.Height);
  swap(a.__isset, b.__isset);
}

const char* ItemInfo::ascii_fingerprint = "1E961C3A7F4B2678E546762BBC657BB7";
const uint8_t ItemInfo::binary_fingerprint[16] = {0x1E,0x96,0x1C,0x3A,0x7F,0x4B,0x26,0x78,0xE5,0x46,0x76,0x2B,0xBC,0x65,0x7B,0xB7};

uint32_t ItemInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ObjPtr);
          this->__isset.ObjPtr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ID);
          this->__isset.ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ServiceID);
          this->__isset.ServiceID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->WinID);
          this->__isset.WinID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->BagObjPtr);
          this->__isset.BagObjPtr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Color);
          this->__isset.Color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Count);
          this->__isset.Count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Width);
          this->__isset.Width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Height);
          this->__isset.Height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Left);
          this->__isset.Left = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Top);
          this->__isset.Top = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Type);
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Name.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->Name.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += iprot->readByte(this->Name[_i40]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ItemInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ItemInfo");

  xfer += oprot->writeFieldBegin("ObjPtr", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ObjPtr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ID", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ServiceID", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->ServiceID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("WinID", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->WinID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BagObjPtr", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->BagObjPtr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Color", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->Color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Count", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->Count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Width", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->Width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Height", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->Height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Left", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->Left);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Top", ::apache::thrift::protocol::T_I16, 11);
  xfer += oprot->writeI16(this->Top);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->Name.size()));
    std::vector<int8_t> ::const_iterator _iter41;
    for (_iter41 = this->Name.begin(); _iter41 != this->Name.end(); ++_iter41)
    {
      xfer += oprot->writeByte((*_iter41));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ItemInfo &a, ItemInfo &b) {
  using ::std::swap;
  swap(a.ObjPtr, b.ObjPtr);
  swap(a.ID, b.ID);
  swap(a.ServiceID, b.ServiceID);
  swap(a.WinID, b.WinID);
  swap(a.BagObjPtr, b.BagObjPtr);
  swap(a.Color, b.Color);
  swap(a.Count, b.Count);
  swap(a.Width, b.Width);
  swap(a.Height, b.Height);
  swap(a.Left, b.Left);
  swap(a.Top, b.Top);
  swap(a.Type, b.Type);
  swap(a.Name, b.Name);
  swap(a.__isset, b.__isset);
}

const char* TrophyBaseInfo::ascii_fingerprint = "20CDC9D979DE694980EA2466496D8E68";
const uint8_t TrophyBaseInfo::binary_fingerprint[16] = {0x20,0xCD,0xC9,0xD9,0x79,0xDE,0x69,0x49,0x80,0xEA,0x24,0x66,0x49,0x6D,0x8E,0x68};

uint32_t TrophyBaseInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ObjPtr);
          this->__isset.ObjPtr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->X);
          this->__isset.X = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Y);
          this->__isset.Y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TrophyBaseInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TrophyBaseInfo");

  xfer += oprot->writeFieldBegin("ObjPtr", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ObjPtr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("X", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->X);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Y", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->Y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TrophyBaseInfo &a, TrophyBaseInfo &b) {
  using ::std::swap;
  swap(a.ObjPtr, b.ObjPtr);
  swap(a.X, b.X);
  swap(a.Y, b.Y);
  swap(a.__isset, b.__isset);
}

const char* TrophyInfo::ascii_fingerprint = "5A136AEC343B9D58E8DD347EB329421D";
const uint8_t TrophyInfo::binary_fingerprint[16] = {0x5A,0x13,0x6A,0xEC,0x34,0x3B,0x9D,0x58,0xE8,0xDD,0x34,0x7E,0xB3,0x29,0x42,0x1D};

uint32_t TrophyInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ObjPtr);
          this->__isset.ObjPtr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ID);
          this->__isset.ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Type);
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Color);
          this->__isset.Color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Width);
          this->__isset.Width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Height);
          this->__isset.Height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->X);
          this->__isset.X = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Y);
          this->__isset.Y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Name.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->Name.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += iprot->readByte(this->Name[_i46]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TrophyInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TrophyInfo");

  xfer += oprot->writeFieldBegin("ObjPtr", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ObjPtr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ID", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Color", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->Color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Width", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->Width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Height", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->Height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("X", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->X);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Y", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->Y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->Name.size()));
    std::vector<int8_t> ::const_iterator _iter47;
    for (_iter47 = this->Name.begin(); _iter47 != this->Name.end(); ++_iter47)
    {
      xfer += oprot->writeByte((*_iter47));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TrophyInfo &a, TrophyInfo &b) {
  using ::std::swap;
  swap(a.ObjPtr, b.ObjPtr);
  swap(a.ID, b.ID);
  swap(a.Type, b.Type);
  swap(a.Color, b.Color);
  swap(a.Width, b.Width);
  swap(a.Height, b.Height);
  swap(a.X, b.X);
  swap(a.Y, b.Y);
  swap(a.Name, b.Name);
  swap(a.__isset, b.__isset);
}

const char* LootType::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t LootType::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t LootType::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Type);
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Color);
          this->__isset.Color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LootType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LootType");

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Color", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LootType &a, LootType &b) {
  using ::std::swap;
  swap(a.Type, b.Type);
  swap(a.Color, b.Color);
  swap(a.__isset, b.__isset);
}

}} // namespace
